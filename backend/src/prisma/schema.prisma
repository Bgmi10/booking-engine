generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {    
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  role      Role
  phone     String?
  basePrice Float?
  updatedAt DateTime @updatedAt
}

model Room {
  id           String          @id @default(uuid())
  name         String       
  description  String       
  amenities    String[]       
  price        Float       
  capacity     Int       
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  images       RoomImage[]
  bookings     Booking[]
  holds        TemporaryHold[]
  RoomRate     RoomRate[]
}

model RoomImage {
  id          String   @id @default(uuid())
  url         String
  roomId      String
  room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Booking {
  id                  String        @id @default(uuid())
  guestFirstName      String
  guestMiddleName     String?
  guestLastName       String
  guestEmail          String  
  guestPhone          String 
  totalGuests         Int
  guestNationality    String?
  checkIn             DateTime  
  status              BookingStatus @default(PENDING)
  checkOut            DateTime  
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  room                Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId              String  
  paymentIntentId     String?
  paymentIntent       PaymentIntent? @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)
  metadata            Json?
  request             String?
  enhancementBookings EnhancementBooking[]
  @@index([roomId, checkIn, checkOut])
}

model Enhancement {
  id                  String                     @id @default(uuid())
  image               String?
  title               String
  description         String
  price               Float
  pricingType         EnhancementPricingType
  availableDays       String[]
  seasonal            Boolean                    @default(false)
  seasonStart         DateTime?
  seasonEnd           DateTime?
  isActive            Boolean                    @default(true)
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
  enhancementBookings EnhancementBooking[]
} 

enum EnhancementPricingType {
  PER_GUEST
  PER_BOOKING
  PER_DAY
}

model EnhancementBooking {
  id             String       @id @default(uuid())
  booking        Booking      @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId      String
  enhancement    Enhancement  @relation(fields: [enhancementId], references: [id], onDelete: Cascade)
  enhancementId  String
  quantity       Int
  dateSelected   DateTime?
  notes          String?
  createdAt      DateTime     @default(now())
}

model TemporaryHold {
  id              String         @id @default(uuid())
  checkIn         DateTime      
  checkOut        DateTime      
  createdAt       DateTime       @default(now())
  expiresAt       DateTime      
  room            Room           @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId          String
  paymentIntentId String?
  paymentIntent   PaymentIntent? @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
}

// NEW: PaymentIntent model to track the entire payment lifecycle
model PaymentIntent {
  id                    String              @id @default(uuid())
  stripePaymentIntentId String?         @unique
  stripeSessionId       String?         @unique
  stripePaymentLinkId   String?         // Add this field to store the Stripe payment link ID
  
  // Payment details
  amount                Float
  currency              String           @default("eur")
  status                PaymentIntentStatus @default(CREATED)
  
  // Booking data (preserved throughout lifecycle)
  bookingData           String           // JSON string of booking items
  customerData          String           // JSON string of customer details
  taxAmount             Float
  totalAmount           Float
  
  // Admin tracking
  createdByAdmin        Boolean          @default(false)
  adminUserId           String?
  adminNotes            String?
  
  // Expiration
  expiresAt             DateTime
  
  // Timestamps
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  paidAt                DateTime?
  
  // Relations
  bookings              Booking[]        
  temporaryHolds        TemporaryHold[]
  payments              Payment[]        // Can have multiple payment attempts

  @@index([status, expiresAt])
  @@index([stripePaymentIntentId])
  @@index([stripeSessionId])
}

// Keep existing Payment model for completed payments
model Payment {
  id                    String           @id @default(uuid())
  stripeSessionId       String?          @unique
  stripePaymentIntentId String?          @unique
  amount                Float
  currency              String
  status                PaymentStatus
  createdAt             DateTime         @default(now())
  // Link to PaymentIntent
  paymentIntentId       String?
  paymentIntent         PaymentIntent?   @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)
}

model RatePolicy {
  id                  String   @id @default(uuid())
  name                String
  description         String
  nightlyRate         Float?
  discountPercentage  Float?
  isActive            Boolean  @default(true)
  refundable          Boolean? @default(false)
  prepayPercentage    Int?
  fullPaymentDays     Int?
  changeAllowedDays   Int?
  rebookValidityDays  Int?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  roomRates           RoomRate[]
}

model RoomRate {
  id              String     @id @default(uuid())
  room            Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId          String
  ratePolicy      RatePolicy @relation(fields: [ratePolicyId], references: [id], onDelete: Cascade)
  ratePolicyId    String
  createdAt       DateTime   @default(now())

  @@index([roomId, ratePolicyId])
  @@unique([roomId, ratePolicyId])
}

model GeneralSettings {
  id            String        @id         @default(uuid())
  minStayDays   Int           @default(2)
  updatedAt     DateTime      @updatedAt
  taxPercentage Float?
}

model Otp {
  id        String   @id @default(uuid())
  email     String   @unique
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum PaymentIntentStatus {
  CREATED           // Admin created the payment intent
  PAYMENT_LINK_SENT // Payment link sent to customer
  PENDING           // Customer initiated payment
  PROCESSING        // Payment being processed
  SUCCEEDED         // Payment completed successfully
  FAILED            // Payment failed
  CANCELLED         // Payment cancelled
  EXPIRED           // Payment expired
  REFUNDED          // Payment refunded
}

enum PaymentStatus {
  PENDING
  COMPLETED
  REFUNDED
  FAILED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  REFUNDED
  CANCELLED
}

enum Role {
  ADMIN
  USER
}

model EmailTemplate {
  id          String      @id @default(cuid())
  name        String      // e.g. "Booking Confirmation", "Admin Notification"
  type        String      // e.g. "BOOKING_CONFIRMATION", "ADMIN_NOTIFICATION"
  subject     String      // Email subject template
  html        String      @db.Text  // The HTML template with placeholders
  design      String?     @db.Text  // Store the Unlayer editor design JSON
  isActive    Boolean     @default(false)
  version     Int         @default(1)
  variables   Json?       // Store template variables
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([type, isActive])
}
