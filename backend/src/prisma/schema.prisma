generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  role      Role
  phone     String?
  updatedAt DateTime @updatedAt
}
model Room {
  id          String   @id @default(uuid())
  name        String
  description String
  amenities   String[]
  price       Float
  capacity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  images       RoomImage[]
  bookings     Booking[]
  holds        TemporaryHold[]

  RoomRate RoomRate[]
}

model RoomImage {
  id          String   @id @default(uuid())
  url         String
  roomId      String
  room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Booking {
  id               String        @id @default(uuid())
  guestName        String  
  guestEmail       String  
  guestPhone       String 
  totalGuests      Int
  guestNationality String?
  checkIn          DateTime  
  status           BookingStatus @default(PENDING)
  checkOut         DateTime  
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  room             Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId           String  
  paymentId        String?
  payment          Payment?      @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  metadata         Json?
  request          String?
  enhancementBookings EnhancementBooking[]
  @@index([roomId, checkIn, checkOut])
}

model Enhancement {
  id            String          @id @default(uuid())
  image         String?
  title         String
  description   String
  price         Float           // Price per unit
  pricingType   EnhancementPricingType
  availableDays String[]        // ['Sunday'] or ['Monday', 'Friday']
  seasonal      Boolean         @default(false)
  seasonStart   DateTime?
  seasonEnd     DateTime?
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  enhancementBookings EnhancementBooking[]
}

enum EnhancementPricingType {
  PER_GUEST
  PER_BOOKING
  PER_DAY
}

model EnhancementBooking {
  id             String       @id @default(uuid())
  booking        Booking      @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId      String
  enhancement    Enhancement  @relation(fields: [enhancementId], references: [id], onDelete: Cascade)
  enhancementId  String
  quantity       Int          // Optional multiplier (e.g., 2 guests)
  dateSelected   DateTime?    // Optional for fixed-date enhancements
  notes          String?
  createdAt      DateTime     @default(now())
}

model TemporaryHold {
  id          String   @id @default(uuid())
  guestName   String
  guestEmail  String
  checkIn     DateTime
  checkOut    DateTime
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId      String

  @@index([expiresAt])
}

model PendingBooking {
  id           String   @id @default(cuid())
  bookingData  String   // JSON string of booking items
  customerData String   // JSON string of customer details
  taxAmount    Float
  totalAmount  Float
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([expiresAt])
}

model Payment {
  id              String           @id @default(uuid())
  stripeSessionId String           @unique
  amount          Float
  currency        String
  status          PaymentStatus
  createdAt       DateTime         @default(now())
  booking         Booking[]
}

model RatePolicy {
  id                  String   @id @default(uuid())
  name                String
  description         String
  nightlyRate         Float?   // optional
  discountPercentage  Float?   // optional
  isActive            Boolean  @default(true)
  refundable          Boolean?  @default(false)
  prepayPercentage    Int?
  fullPaymentDays     Int?
  changeAllowedDays   Int?
  rebookValidityDays  Int?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  roomRates           RoomRate[]
}

model RoomRate {
  id          String     @id @default(uuid())
  room        Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId      String
  ratePolicy  RatePolicy @relation(fields: [ratePolicyId], references: [id], onDelete: Cascade)
  ratePolicyId String
  createdAt   DateTime   @default(now())

  @@index([roomId, ratePolicyId])
  @@unique([roomId, ratePolicyId])
}


model Otp {
  id        String   @id @default(uuid())
  email     String   @unique
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum PaymentStatus {
  PENDING
  COMPLETED
  REFUNDED
  FAILED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum Role {
  ADMIN
  USER
}