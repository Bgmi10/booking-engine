generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {    
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  role      Role
  phone     String?
  basePrice Float?
  updatedAt DateTime @updatedAt
}

model Room {
  id           String          @id @default(uuid())
  name         String       
  description  String       
  amenities    String[]       
  price        Float       
  capacity     Int       
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  images       RoomImage[]
  bookings     Booking[]
  holds        TemporaryHold[]
  RoomRate     RoomRate[]
}

model RoomImage {
  id          String   @id @default(uuid())
  url         String
  roomId      String
  room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Customer {
  id                  String        @id @default(uuid())
  guestFirstName      String
  guestMiddleName     String?
  guestLastName       String
  guestEmail          String        @unique
  guestPhone          String 
  guestNationality    String?
  dob                 DateTime?
  passportNumber      String?
  vipStatus           Boolean       @default(false)
  anniversaryDate     DateTime?
  passportExpiry      DateTime?
  totalNightStayed    Int           @default(0)
  totalMoneySpent     Float         @default(0)
  favoriteItems       Json?
  stripeCustomerId    String?
  updatedAt           DateTime      @updatedAt
  createdAt           DateTime      @default(now())
  bookings            Booking[]
  paymentIntents      PaymentIntent[]
  groupName           String?
  groupEmail          String?
  charges             Charge[]
  @@index([guestEmail, guestFirstName])
}

model Charge {
  id                    String          @id   @default(uuid())
  amount                Float 
  currency              String          @default("eur")
  description           String?
  gatekeeperUrl         String?
  status                ChargeStatus    @default(PENDING)
  expiredAt             DateTime      
  createdAt             DateTime        @default(now())
  paidAt                DateTime?
  stripePaymentIntentId String?
  paymentMethod         String?
  paymentUrl            String?         
  createdBy             String
  customerId            String
  customer              Customer        @relation(fields: [customerId], references: [id])
  adminNotes            String?
}
        
model Booking {        
  id                  String                @id @default(uuid())
  totalGuests         Int        
  checkIn             DateTime          
  status              BookingStatus         @default(PENDING)
  checkOut            DateTime          
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  room                Room                  @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId              String  
  paymentIntentId     String?
  paymentIntent       PaymentIntent?        @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)
  metadata            Json?
  request             String?
  customerId          String
  customer            Customer              @relation(fields: [customerId], references: [id], onDelete: Cascade)
  enhancementBookings EnhancementBooking[]
  voucherUsages       VoucherUsage[]
  voucherCode         String?           // The voucher code used
  voucherDiscount     Float?            // Discount amount applied from voucher
  voucherProducts     Json?          
  groupId             String?
  @@index([roomId, checkIn, checkOut])
}

model Enhancement {
  id                  String                     @id @default(uuid())
  image               String?
  title               String
  description         String
  price               Float
  pricingType         EnhancementPricingType
  availableDays       String[]
  seasonal            Boolean                    @default(false)
  seasonStart         DateTime?
  seasonEnd           DateTime?
  isActive            Boolean                    @default(true)
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
  enhancementBookings EnhancementBooking[]
} 

enum EnhancementPricingType {
  PER_GUEST
  PER_BOOKING
  PER_DAY
}

model EnhancementBooking {
  id             String       @id @default(uuid())
  booking        Booking      @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId      String
  enhancement    Enhancement  @relation(fields: [enhancementId], references: [id], onDelete: Cascade)
  enhancementId  String
  quantity       Int
  dateSelected   DateTime?
  notes          String?
  createdAt      DateTime     @default(now())
}

model TemporaryHold {
  id              String         @id @default(uuid())
  checkIn         DateTime      
  checkOut        DateTime      
  createdAt       DateTime       @default(now())
  expiresAt       DateTime      
  room            Room           @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId          String
  paymentIntentId String?
  paymentIntent   PaymentIntent? @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
}

// NEW: PaymentIntent model to track the entire payment lifecycle
model PaymentIntent {
  id                    String              @id @default(uuid())
  stripePaymentIntentId String?         @unique
  stripeSessionId       String?         @unique
  stripePaymentLinkId   String?        
  amount                Float
  currency              String           @default("eur")
  status                PaymentIntentStatus @default(CREATED)
  
  // Booking data (preserved throughout lifecycle)
  bookingData           String           // JSON string of booking items
  customerData          String           // JSON string of customer details
  taxAmount             Float
  totalAmount           Float
  
  // Admin tracking
  createdByAdmin        Boolean          @default(false)
  adminUserId           String?
  adminNotes            String?
  
  // Expiration
  expiresAt             DateTime?
  
  // Timestamps
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  paidAt                DateTime?
  
  // Relations
  customerId            String?
  customer              Customer?         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  bookings              Booking[]        
  temporaryHolds        TemporaryHold[]
  payments              Payment[] 
  voucherCode           String?           // The voucher code used
  voucherDiscount       Float?            // Discount amount applied from voucher
  voucherUsages         VoucherUsage[]       // Can have multiple payment attempts

  @@index([status, expiresAt])
  @@index([stripePaymentIntentId])
  @@index([stripeSessionId])
}

// Keep existing Payment model for completed payments
model Payment {
  id                    String           @id @default(uuid())
  stripeSessionId       String?          @unique
  stripePaymentIntentId String?          @unique
  amount                Float
  currency              String
  status                PaymentStatus
  createdAt             DateTime         @default(now())
  // Link to PaymentIntent
  paymentIntentId       String?
  paymentIntent         PaymentIntent?   @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)
}

model RatePolicy {
  id                  String   @id @default(uuid())
  name                String
  description         String
  nightlyRate         Float?
  discountPercentage  Float?
  isActive            Boolean  @default(true)
  refundable          Boolean? @default(false)
  prepayPercentage    Int?
  fullPaymentDays     Int?
  changeAllowedDays   Int?
  rebookValidityDays  Int?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  roomRates           RoomRate[]
}

model RoomRate {
  id              String     @id @default(uuid())
  room            Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId          String
  ratePolicy      RatePolicy @relation(fields: [ratePolicyId], references: [id], onDelete: Cascade)
  ratePolicyId    String
  createdAt       DateTime   @default(now())

  @@index([roomId, ratePolicyId])
  @@unique([roomId, ratePolicyId])
}

model GeneralSettings {
  id            String        @id         @default(uuid())
  minStayDays   Int           @default(2)
  updatedAt     DateTime      @updatedAt
  taxPercentage Float?
}

model Otp {
  id        String   @id @default(uuid())
  email     String   @unique
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model BookingRestriction {
  id           String             @id @default(uuid())
  name         String             // Descriptive name for the restriction
  description  String?            // Optional description
  
  // Restriction type
  type         RestrictionType
  
  // Date range
  startDate    DateTime
  endDate      DateTime
  
  // Days of week (if you want to apply only on specific days)
  daysOfWeek   Int[]              // [0-6] where 0=Sunday, 1=Monday, etc.
  
  // Rate restrictions
  rateScope    RateScope          @default(ALL_RATES)
  ratePolicyIds String[]          // Specific rate policy IDs when rateScope is SPECIFIC_RATES
  
  // Room restrictions
  roomScope    RoomScope          @default(ALL_ROOMS)
  roomIds      String[]           // Specific room IDs when roomScope is SPECIFIC_ROOMS
  
  // Length restrictions
  minLength    Int?               // Minimum nights
  maxLength    Int?               // Maximum nights
  
  // Advance booking restrictions
  minAdvance   Int?               // Minimum hours before check-in
  maxAdvance   Int?               // Maximum days in advance
  
  // Same day booking cutoff time
  sameDayCutoffTime String?       // Format: "15:00" (3 PM)
  
  // Priority for overlapping restrictions
  priority     Int                @default(0)
  
  // Active status
  isActive     Boolean            @default(true)
  
  // Exception rules
  exceptions   RestrictionException[]
  
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  
  @@index([startDate, endDate])
  @@index([type, isActive])
}

model RestrictionException {
  id                    String             @id @default(uuid())
  bookingRestriction    BookingRestriction @relation(fields: [bookingRestrictionId], references: [id], onDelete: Cascade)
  bookingRestrictionId  String
  
  // Exception conditions
  minLengthOverride     Int?               // Override minimum length for this exception
  maxLengthOverride     Int?               // Override maximum length for this exception
  
  // Date range for this exception
  exceptionStartDate    DateTime?
  exceptionEndDate      DateTime?
  
  // Days of week for this exception
  exceptionDaysOfWeek   Int[]
  
  // Rate overrides for this exception
  rateScope             RateScope?
  ratePolicyIds         String[]
  
  // Room overrides for this exception
  roomScope             RoomScope?
  roomIds               String[]
  
  isActive              Boolean            @default(true)
  createdAt             DateTime           @default(now())
  
  @@index([exceptionStartDate, exceptionEndDate])
}

model EmailTemplate {
  id          String      @id @default(cuid())
  name        String      // e.g. "Booking Confirmation", "Admin Notification"
  type        String      // e.g. "BOOKING_CONFIRMATION", "ADMIN_NOTIFICATION"
  subject     String      // Email subject template
  html        String      @db.Text  // The HTML template with placeholders
  design      String?     @db.Text  // Store the Unlayer editor design JSON
  isActive    Boolean     @default(false)
  version     Int         @default(1)
  variables   Json?       // Store template variables
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([type, isActive])
}

model VoucherProduct {
  id          String      @id @default(cuid())
  name        String
  description String?
  imageUrl    String
  value       Float
  isActive    Boolean
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  vouchers   Voucher[]    @relation("VoucherProducts")
  @@index([isActive])
}

model Voucher {
  id                                String      @id @default(cuid())
  code                              String      @unique
  name                              String
  description                       String?
  type                              VoucherType 
  discountPercent                   Float?
  fixedAmount                       Float?
  maxUsage                          Int?
  currentUsage                      Int          @default(0)
  maxUsagePerUser                   Int?
  validFrom                         DateTime
  validTill                         DateTime
  roomScope                         VoucherRoomScope    @default(ALL_ROOMS)
  roomIds                           String[]
  rateScope                         VoucherRateScope    @default(ALL_RATES)
  ratePolicyIds                     String[] 
  isActive                          Boolean  
  productIds                        String[] 
  createdAt                         DateTime            @default(now())
  updatedAt                         DateTime            @updatedAt
  createdBy                         String? 
  products                          VoucherProduct[]    @relation("VoucherProducts")
  usages                            VoucherUsage[]
  @@index([code, isActive])
  @@index([validFrom, validTill])
  @@index([type, isActive])
}

model VoucherUsage {
  id                String              @id @default(uuid())
  voucher           Voucher             @relation(fields: [voucherId], references: [id], onDelete: Cascade)
  voucherId         String
  
  // Usage details
  usedBy            String?             // User email or identifier
  usedAt            DateTime            @default(now())
  
  // Booking context
  booking           Booking?            @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId         String?
  paymentIntent     PaymentIntent?      @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)
  paymentIntentId   String?
  
  discountAmount    Float?        
  originalAmount    Float?             
  finalAmount       Float?            
  productsReceived  Json?
  status            VoucherUsageStatus  @default(APPLIED)
  
  @@index([voucherId, usedAt])
  @@index([bookingId])
  @@index([paymentIntentId])
}

// Enums for voucher system
enum VoucherType {
  DISCOUNT    // Percentage discount
  FIXED       // Fixed amount discount
  PRODUCT     // Free product(s)
}

enum VoucherRoomScope {
  ALL_ROOMS       // Apply to all rooms
  SPECIFIC_ROOMS  // Apply to specific rooms only
}

enum VoucherRateScope {
  ALL_RATES       // Apply to all rate policies
  SPECIFIC_RATES  // Apply to specific rate policies only
}

enum VoucherUsageStatus {
  APPLIED     // Voucher was successfully applied
  REFUNDED    // Voucher usage was refunded
  CANCELLED   // Voucher usage was cancelled
}

enum ChargeStatus {
  PENDING
  SUCCEEDED
  FAILED
  EXPIRED
  REFUNDED
}

enum PaymentIntentStatus {
  CREATED           // Admin created the payment intent
  PAYMENT_LINK_SENT // Payment link sent to customer
  PENDING           // Customer initiated payment
  PROCESSING        // Payment being processed
  SUCCEEDED         // Payment completed successfully
  FAILED            // Payment failed
  CANCELLED         // Payment cancelled
  EXPIRED           // Payment expired
  REFUNDED          // Payment refunded
}

enum PaymentStatus {
  PENDING
  COMPLETED
  REFUNDED
  FAILED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  REFUNDED
  CANCELLED
}

enum Role {
  ADMIN
  USER
}

enum RestrictionType {
  CLOSE_TO_STAY        // Cannot stay overnight on specified dates
  CLOSE_TO_ARRIVAL     // Cannot check in on specified dates  
  CLOSE_TO_DEPARTURE   // Cannot check out on specified dates
  MIN_LENGTH           // Minimum stay requirement
  MAX_LENGTH           // Maximum stay requirement
  ADVANCE_BOOKING      // Advance booking requirements
}

enum RateScope {
  ALL_RATES           // Apply to all rate policies
  SPECIFIC_RATES      // Apply to specific rate policies only
  BASE_RATE           // Apply to base rate only
}

enum RoomScope {
  ALL_ROOMS           // Apply to all rooms
  SPECIFIC_ROOMS      // Apply to specific rooms only
}