generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {             
  id                        String                      @id @default(uuid())
  name                      String                   
  email                     String                      @unique
  password                  String                   
  createdAt                 DateTime                    @default(now())
  role                      Role                   
  phone                     String?                   
  basePrice                 Float?                   
  updatedAt                 DateTime                    @updatedAt
  assignedNotifications     Notification[]              @relation("AssignedNotifications")
  createdNotifications      Notification[]              @relation("CreatedNotifications")
  completedNotifications    Notification[]              @relation("CompletedNotifications")
  notificationAttachments   NotificationAttachment[]
  assignedAutomatedTasks    AutomatedTaskRule[]
  kitchenOrders             Order[]                     @relation("KitchenOrders")
  waiterOrders              Order[]                     @relation("WaiterOrders")
}            

model Room {
  id            String           @id @default(uuid())
  name          String        
  description   String        
  amenities     String[]        
  price         Float        
  capacity      Int        
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  images        RoomImage[]
  bookings      Booking[]
  holds         TemporaryHold[]
  RoomRate      RoomRate[]
  notifications Notification[]
}

model RoomImage {
  id          String   @id @default(uuid())
  url         String
  roomId      String
  room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Customer {      
  id                  String              @id @default(uuid())
  guestFirstName      String      
  guestMiddleName     String?      
  guestLastName       String      
  guestEmail          String              @unique
  guestPhone          String       
  guestNationality    String?      
  dob                 DateTime?      
  passportNumber      String?      
  vipStatus           Boolean             @default(false)
  anniversaryDate     DateTime?      
  passportExpiry      DateTime?      
  totalNightStayed    Int                 @default(0)
  totalMoneySpent     Float               @default(0)
  favoriteItems       Json?      
  stripeCustomerId    String?      
  updatedAt           DateTime            @updatedAt
  createdAt           DateTime            @default(now())
  
  // Added authentication fields
  accountActivated     Boolean             @default(false)
  emailVerified        Boolean             @default(false)
  emailVerifyToken     String?
  lastLogin            DateTime?
  password             String?
  temporaryAccessToken String?

  bookings            Booking[]
  paymentIntents      PaymentIntent[]
  groupName           String?
  groupEmail          String?
  charges             Charge[]
  notifications       Notification[]
  orders              Order[]
  weddingProposals    WeddingProposal[]
  @@index([guestEmail, guestFirstName])
}

model Charge {
  id                    String                @id   @default(uuid())
  amount                Float    
  currency              String                @default("eur")
  description           String?   
  gatekeeperUrl         String?   
  status                ChargeStatus          @default(PENDING)
  expiredAt             DateTime?         
  createdAt             DateTime              @default(now())
  paidAt                DateTime?   
  stripePaymentIntentId String?   
  paymentMethod         String?   
  paymentUrl            String?            
  createdBy             String   
  customerId            String?      
  customer              Customer?             @relation(fields: [customerId], references: [id])
  adminNotes            String?   
  orderId               String?               @unique
  order                 Order?                @relation(fields: [orderId], references: [id], onDelete: Cascade)
  tempCustomerId        String?  
  tempCustomer          TemporaryCustomer?    @relation(fields: [tempCustomerId], references: [id])  
}
        
model Booking {        
  id                  String                @id @default(uuid())
  totalGuests         Int        
  checkIn             DateTime          
  status              BookingStatus         @default(PENDING)
  checkOut            DateTime          
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  room                Room                  @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId              String  
  paymentIntentId     String?
  paymentIntent       PaymentIntent?        @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)
  metadata            Json?
  request             String?
  customerId          String
  customer            Customer              @relation(fields: [customerId], references: [id], onDelete: Cascade)
  enhancementBookings EnhancementBooking[]
  voucherUsages       VoucherUsage[]
  voucherCode         String?         
  voucherDiscount     Float?           
  voucherProducts     Json?          
  groupId             String?
  carNumberPlate      String?          
  notifications       Notification[]
  @@index([roomId, checkIn, checkOut, status])
}

model Enhancement {
  id                  String                     @id @default(uuid())
  image               String?
  title               String
  description         String
  price               Float
  pricingType         EnhancementPricingType
  availableDays       String[]
  seasonal            Boolean                    @default(false)
  seasonStart         DateTime?
  seasonEnd           DateTime?
  isActive            Boolean                    @default(true)
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
  enhancementBookings EnhancementBooking[]
} 

enum EnhancementPricingType {
  PER_GUEST
  PER_BOOKING
  PER_DAY
}

model EnhancementBooking {
  id             String       @id @default(uuid())
  booking        Booking      @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId      String
  enhancement    Enhancement  @relation(fields: [enhancementId], references: [id], onDelete: Cascade)
  enhancementId  String
  quantity       Int
  dateSelected   DateTime?
  notes          String?
  createdAt      DateTime     @default(now())
}

model TemporaryHold {
  id              String         @id @default(uuid())
  checkIn         DateTime      
  checkOut        DateTime      
  createdAt       DateTime       @default(now())
  expiresAt       DateTime      
  room            Room           @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId          String
  paymentIntentId String?
  paymentIntent   PaymentIntent? @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)
  @@index([expiresAt, checkIn, checkOut, roomId])
}

model PaymentIntent {
  id                    String              @id @default(uuid())
  stripePaymentIntentId String?             @unique
  stripeSessionId       String?             @unique
  stripePaymentLinkId   String?            
  amount                Float    
  currency              String              @default("eur")
  status                PaymentIntentStatus @default(CREATED)
  bookingData           String           
  customerData          String          
  taxAmount             Float
  totalAmount           Float
  createdByAdmin        Boolean             @default(false)
  adminUserId           String?   
  adminNotes            String?   
  expiresAt             DateTime?   
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  paidAt                DateTime?
  customerId            String?  
  customer              Customer?           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  bookings              Booking[]        
  temporaryHolds        TemporaryHold[]
  payments              Payment[] 
  voucherCode           String?           
  voucherDiscount       Float?            
  voucherUsages         VoucherUsage[]    
  @@index([status, expiresAt])
  @@index([stripePaymentIntentId])
  @@index([stripeSessionId])
}

model Payment {
  id                    String           @id @default(uuid())
  stripeSessionId       String?          @unique
  stripePaymentIntentId String?          @unique
  amount                Float
  currency              String
  status                PaymentStatus
  createdAt             DateTime         @default(now())
  paymentIntentId       String?
  paymentIntent         PaymentIntent?   @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)
}

model RatePolicy {
  id                  String   @id @default(uuid())
  name                String
  description         String
  nightlyRate         Float?
  discountPercentage  Float?
  isActive            Boolean  @default(true)
  refundable          Boolean? @default(false)
  prepayPercentage    Int?
  fullPaymentDays     Int?
  changeAllowedDays   Int?
  rebookValidityDays  Int?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  roomRates           RoomRate[]
}

model RoomRate {
  id              String     @id @default(uuid())
  room            Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId          String
  ratePolicy      RatePolicy @relation(fields: [ratePolicyId], references: [id], onDelete: Cascade)
  ratePolicyId    String
  createdAt       DateTime   @default(now())
  @@index([roomId, ratePolicyId])
  @@unique([roomId, ratePolicyId])
}

model GeneralSettings {        
  id                           String        @id            @default(uuid())
  minStayDays                  Int           @default(2)
  updatedAt                    DateTime      @updatedAt
  taxPercentage                Float?
  chargePaymentConfig          String?
  dahuaApiUrl                  String?       
  dahuaUsername                String?       
  dahuaPassword                String?       
  dahuaIsEnabled               Boolean       @default(false) 
  dahuaGateId                  String?       
  dahuaLicensePlateExpiryHours Int           @default(24)
}

model Otp {
  id        String   @id @default(uuid())
  email     String   @unique
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}
       
model BookingRestriction {       
  id                                   String                    @id @default(uuid())
  name                                 String                    
  description                          String?                   
  type                                 RestrictionType       
  startDate                            DateTime       
  endDate                              DateTime       
  daysOfWeek                           Int[]          
  rateScope                            RateScope                 @default(ALL_RATES)
  ratePolicyIds                         String[]        
  roomScope                            RoomScope                 @default(ALL_ROOMS)
  roomIds                              String[]         
  minLength                            Int?             
  maxLength                            Int?             
  minAdvance                           Int?        
  maxAdvance                           Int?        
  sameDayCutoffTime                    String?          
  priority                             Int                       @default(0)
  isActive                             Boolean                   @default(true)
  exceptions                           RestrictionException[]
  createdAt                            DateTime                  @default(now())
  updatedAt                            DateTime                  @updatedAt
  @@index([startDate, endDate])
  @@index([type, isActive])
}

model RestrictionException {
  id                                  String             @id @default(uuid())
  bookingRestriction                  BookingRestriction @relation(fields: [bookingRestrictionId], references: [id], onDelete: Cascade)
  bookingRestrictionId                String
  minLengthOverride                   Int?  
  maxLengthOverride                   Int?
  exceptionStartDate                  DateTime?
  exceptionEndDate                    DateTime?
  exceptionDaysOfWeek                 Int[]
  rateScope                           RateScope?
  ratePolicyIds                       String[]
  roomScope                           RoomScope?
  roomIds                             String[]
  isActive                            Boolean            @default(true)
  createdAt                           DateTime           @default(now())
  @@index([exceptionStartDate, exceptionEndDate])
}

model EmailTemplate {
  id          String         @id @default(cuid())
  name        String        
  type        String        
  subject     String        
  html        String         @db.Text  
  design      String?        @db.Text 
  isActive    Boolean        @default(false)
  version     Int            @default(1)
  variables   Json?         
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  @@index([type, isActive])
}

model VoucherProduct {
  id          String      @id @default(cuid())
  name        String
  description String?
  imageUrl    String
  value       Float
  isActive    Boolean
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  vouchers   Voucher[]    @relation("VoucherProducts")
  @@index([isActive])
}

model Voucher {
  id                                String              @id @default(cuid())
  code                              String              @unique
  name                              String
  description                       String?
  type                              VoucherType 
  discountPercent                   Float?
  fixedAmount                       Float?
  maxUsage                          Int?
  currentUsage                      Int                 @default(0)
  maxUsagePerUser                   Int?
  validFrom                         DateTime
  validTill                         DateTime
  roomScope                         VoucherRoomScope    @default(ALL_ROOMS)
  roomIds                           String[]
  rateScope                         VoucherRateScope    @default(ALL_RATES)
  ratePolicyIds                     String[] 
  isActive                          Boolean  
  productIds                        String[] 
  createdAt                         DateTime            @default(now())
  updatedAt                         DateTime            @updatedAt
  createdBy                         String? 
  products                          VoucherProduct[]    @relation("VoucherProducts")
  usages                            VoucherUsage[]
  @@index([code, isActive])
  @@index([validFrom, validTill])
  @@index([type, isActive])
}

model VoucherUsage {
  id                           String              @id @default(uuid())
  voucher                      Voucher             @relation(fields: [voucherId], references: [id], onDelete: Cascade)
  voucherId                    String
  usedBy                       String?            
  usedAt                       DateTime            @default(now())
  booking                      Booking?            @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId                    String?
  paymentIntent                PaymentIntent?      @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)
  paymentIntentId              String?
  discountAmount               Float?        
  originalAmount               Float?             
  finalAmount                  Float?            
  productsReceived             Json?
  status                       VoucherUsageStatus  @default(APPLIED)
  @@index([voucherId, usedAt])
  @@index([bookingId])
  @@index([paymentIntentId])
}

enum VoucherType {
  DISCOUNT    
  FIXED       
  PRODUCT   
}

enum VoucherRoomScope {
  ALL_ROOMS       
  SPECIFIC_ROOMS 
}

enum VoucherRateScope {
  ALL_RATES      
  SPECIFIC_RATES
}

enum VoucherUsageStatus {
  APPLIED     
  REFUNDED    // Voucher usage was refunded
  CANCELLED   // Voucher usage was cancelled
}

enum ChargeStatus {
  PENDING
  SUCCEEDED
  FAILED
  EXPIRED
  REFUNDED
}

enum PaymentIntentStatus {
  CREATED           // Admin created the payment intent
  PAYMENT_LINK_SENT // Payment link sent to customer
  PENDING           // Customer initiated payment
  PROCESSING        // Payment being processed
  SUCCEEDED         // Payment completed successfully
  FAILED            // Payment failed
  CANCELLED         // Payment cancelled
  EXPIRED           // Payment expired
  REFUNDED          // Payment refunded
}

enum PaymentStatus {
  PENDING
  COMPLETED
  REFUNDED
  FAILED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  REFUNDED
  CANCELLED
}

enum Role {
  ADMIN
  USER
  MANAGER
  RECEPTION
  CLEANER
  MAINTENANCE
  KITCHEN
  WAITER
}

enum RestrictionType {
  CLOSE_TO_STAY        // Cannot stay overnight on specified dates
  CLOSE_TO_ARRIVAL     // Cannot check in on specified dates  
  CLOSE_TO_DEPARTURE   // Cannot check out on specified dates
  MIN_LENGTH           // Minimum stay requirement
  MAX_LENGTH           // Maximum stay requirement
  ADVANCE_BOOKING      // Advance booking requirements
}

enum RateScope {
  ALL_RATES           // Apply to all rate policies
  SPECIFIC_RATES      // Apply to specific rate policies only
  BASE_RATE           // Apply to base rate only
}

enum RoomScope {
  ALL_ROOMS           // Apply to all rooms
  SPECIFIC_ROOMS      // Apply to specific rooms only
}

model Notification {
  id              String              @id @default(uuid())
  title           String
  description     String?
  type            NotificationType
  priority        NotificationPriority @default(MEDIUM)
  status          NotificationStatus   @default(PENDING)
  
  // Assignment
  assignedTo      String?             // User ID
  assignedBy      String?              // User ID who created/assigned
  assignedRole    Role?               // Role-based assignment
  
  // Guest association (optional)
  guestId         String?             // Customer ID
  guestName       String?             // Guest name for display
  
  // Room association (optional)
  roomId          String?             // Room ID
  roomName        String?             // Room name for display
  
  // Booking association (optional)
  bookingId       String?             // Booking ID
  
  // Due date and completion
  dueDate         DateTime?
  completedAt     DateTime?
  completedBy     String?             // User ID who completed
  
  // Attachments
  attachments     NotificationAttachment[]
  
  // Automated task info
  isAutomated     Boolean             @default(false)
  automatedRuleId String?             // Reference to automated rule
  
  // Timestamps
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  assignedUser    User?               @relation("AssignedNotifications", fields: [assignedTo], references: [id])
  createdByUser   User?               @relation("CreatedNotifications", fields: [assignedBy], references: [id])
  completedByUser User?               @relation("CompletedNotifications", fields: [completedBy], references: [id])
  guest           Customer?           @relation(fields: [guestId], references: [id])
  room            Room?               @relation(fields: [roomId], references: [id])
  booking         Booking?            @relation(fields: [bookingId], references: [id])
  automatedRule   AutomatedTaskRule?  @relation(fields: [automatedRuleId], references: [id])
  
  @@index([assignedTo, status])
  @@index([assignedRole, status])
  @@index([dueDate])
  @@index([guestId])
  @@index([roomId])
  @@index([bookingId])
}

model NotificationAttachment {
  id              String        @id @default(uuid())
  notificationId  String
  fileName        String
  fileUrl         String
  fileType        String
  fileSize        Int
  uploadedBy      String
  createdAt       DateTime      @default(now())
  
  // Relations
  notification    Notification  @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  uploadedByUser  User          @relation(fields: [uploadedBy], references: [id])
}

model AutomatedTaskRule {
  id              String              @id @default(uuid())
  name            String
  description     String?
  taskTitle       String
  taskDescription String?
  
  // Trigger conditions
  triggerType     AutomatedTaskTriggerType
  triggerDay      Int?                // Day of stay (e.g., 3 for 3rd day)
  triggerTime     String?             // Time of day (e.g., "09:00")
  
  // Assignment
  assignedRole    Role
  assignedTo      String?             // Specific user ID (optional)
  
  // Room scope
  roomScope       RoomScope           @default(ALL_ROOMS)
  roomIds         String[]            // Specific room IDs when roomScope is SPECIFIC_ROOMS
  
  // Task details
  priority        NotificationPriority @default(MEDIUM)
  dueDateOffset   Int?                // Hours after trigger to set as due
  
  // Active status
  isActive        Boolean             @default(true)
  
  // Timestamps
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  assignedUser    User?               @relation(fields: [assignedTo], references: [id])
  notifications   Notification[]
  
  @@index([isActive, triggerType])
  @@index([roomScope])
}

model TemporaryCustomer {
  id        String   @id @default(uuid())
  surname   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  charges   Charge[]
  stripeCustomerId String?
}

model Location {
  id              String          @id         @default(uuid())
  name            String          @unique
  updateAt        DateTime        @updatedAt
  orderCategories OrderCategory[]
  order           Order[]
}

model OrderCategory {
  id                String       @id             @default(uuid())
  name              String
  description       String?
  imageUrl          String
  orderItems        OrderItem[]
  isAvailable       Boolean?     @default(true)
  availabilityRule  AvailabilityRule?
  locations         Location[]
}

model OrderItem {
  id               String         @id         @default(uuid())
  name             String
  description      String
  imageUrl         String
  price            Float
  isAvailable      Boolean?       @default(true)
  categories       OrderCategory[]
  role             OrderItemRole
}

model Product {
  id           String               @id @default(uuid())
  name         String
  description  String?
  price        Float
  pricingModel ProductPricingModel  @default(FIXED)
  type         ProductType          @default(WEDDING)
  category     String
  sampleMenu   Json?
  image        String?
  isActive     Boolean              @default(true)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  itineraryItems ItineraryItem[]    // Add this relation
}

// Wedding Proposal System Models
model WeddingProposal { 
  id                             String           @id @default(uuid())
  name                           String 
  status                         ProposalStatus   @default(DRAFT)
  weddingDate                    DateTime 
  mainGuestCount                 Int 
  termsAndConditions             String? 
  customerId                     String 
  customer                       Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  holdExpiresAt                  DateTime? 
  createdAt                      DateTime         @default(now())
  updatedAt                      DateTime         @updatedAt
  itineraryDays                  ItineraryDay[]
  paymentPlan                    PaymentPlan?
  sentEmailCount                 Int              @default(0)
  lastEmailSentAt                DateTime?       
  finalGuestConfirmationSent     Boolean          @default(false)
  finalGuestConfirmationSentAt   DateTime?       
  finalGuestCountConfirmed       Boolean          @default(false)
  finalGuestCountConfirmedAt     DateTime?

  externalVendors                ExternalVendor[]
  serviceRequests                WeddingServiceRequest[]
  
  @@map("wedding_proposals")
  @@index([customerId])
  @@index([status, weddingDate])
}

model ItineraryDay {
  id          String   @id @default(uuid())
  dayNumber   Int      // Day 1, Day 2, etc.
  date        DateTime
  
  proposal    WeddingProposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId  String
  
  items       ItineraryItem[]
  
  // Relation to service requests specific to this day
  serviceRequests WeddingServiceRequest[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([proposalId, dayNumber])
}

model ItineraryItem {
  id            String      @id @default(uuid())
  
  day           ItineraryDay @relation(fields: [dayId], references: [id], onDelete: Cascade)
  dayId         String
  
  // Link to the product
  product       Product     @relation(fields: [productId], references: [id])
  productId     String
  
  // Specific details for this instance
  guestCount    Int
  status        ItineraryItemStatus @default(OPTIONAL)
  price         Float       // The price for this specific item
  notes         String?
  
  // Custom menu for this specific item
  customMenu    Json?       // For storing the customized menu for this specific item
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PaymentPlan {
  id          String      @id @default(uuid())
  
  proposal    WeddingProposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId  String      @unique
  
  // Replace JSON field with a relationship
  stages      PaymentStage[]
  
  totalAmount Float       // Total amount for the payment plan
  currency    String      @default("eur")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PaymentStage {
  id                    String               @id @default(uuid())
  paymentPlan           PaymentPlan          @relation(fields: [paymentPlanId], references: [id], onDelete: Cascade)
  paymentPlanId         String
  description           String      // e.g., "Initial deposit", "Accommodation payment"
  amount                Float       // Fixed amount for this stage
  dueDate               DateTime    // When this payment is due
  status                PaymentStageStatus  @default(PENDING)
  stripePaymentIntentId String?
  stripePaymentUrl      String?
  reminderSent    Boolean             @default(false)
  paidAt          DateTime?
  reminders       PaymentReminder[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

model PaymentReminder {
  id             String       @id @default(cuid())
  paymentStageId String
  paymentStage   PaymentStage @relation(fields: [paymentStageId], references: [id], onDelete: Cascade)
  type           String       
  sentAt         DateTime     @default(now())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([paymentStageId])
  @@index([type])
  @@index([sentAt])
}


enum PaymentStageStatus {
  PENDING
  PROCESSING
  PAID
  OVERDUE
  CANCELLED
}

enum ProposalStatus {
  DRAFT       // Being built by admin
  SENT        // Sent to customer
  ACCEPTED    // Customer has accepted
  CONFIRMED   // All items confirmed
  COMPLETED   // Wedding has happened
  CANCELLED
}

enum ItineraryItemStatus {
  CONFIRMED
  OPTIONAL
}

enum ProductType {
  REGULAR
  WEDDING
  RESTAURANT
}

enum ProductPricingModel {
  FIXED
  PER_PERSON
}

// Models for External Vendor Contacts
model ExternalVendor {
  id          String   @id @default(uuid())
  type        String   // e.g., "Photographer", "Hair & Makeup"
  name        String
  email       String?
  phone       String?
  notes       String?
  
  proposal    WeddingProposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId  String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([proposalId])
}

// Models for Bespoke Wedding Service Requests
model WeddingServiceRequest {
  id             String                 @id @default(uuid())
  title          String
  description    String                 @db.Text
  status         ServiceRequestStatus   @default(PENDING)
  
  // Admin-defined quote
  price          Float?
  guestCount     Int?
  
  // Relations
  proposal       WeddingProposal        @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId     String
  
  itineraryDay   ItineraryDay?          @relation(fields: [itineraryDayId], references: [id])
  itineraryDayId String?
  
  messages       WeddingServiceMessage[]
  
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  @@index([proposalId])
  @@index([itineraryDayId])
}

model WeddingServiceMessage {
  id          String    @id @default(uuid())
  text        String?   @db.Text
  sender      MessageSender
  
  request     WeddingServiceRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId   String
  
  attachments WeddingServiceAttachment[]
  
  createdAt   DateTime  @default(now())

  @@index([requestId])
}

model WeddingServiceAttachment {
  id          String    @id @default(uuid())
  url         String
  fileName    String
  fileType    String
  fileSize    Int
  
  message     WeddingServiceMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId   String
  
  createdAt   DateTime  @default(now())

  @@index([messageId])
}

enum ServiceRequestStatus {
  PENDING   // Guest has submitted the request
  QUOTED    // Admin has provided a price
  ACCEPTED  // Guest has accepted the quote
  REJECTED  // Guest has rejected the quote
  COMPLETED // Service delivered
  CANCELLED // Request cancelled
}

enum MessageSender {
  GUEST
  ADMIN
}

model AvailabilityRule {
  id                String         @id @default(uuid())
  name              String         // e.g., "Weekday Mornings", "Weekend Brunch"
  orderCategoryId   String         @unique
  orderCategory     OrderCategory  @relation(fields: [orderCategoryId], references: [id], onDelete: Cascade)
  startTime         String         // "HH:MM" format, e.g., "07:00"
  endTime           String         // "HH:MM" format, e.g., "11:00"
  daysOfWeek        Int[]          // [0-6] where 0=Sunday, 1=Monday, etc.
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model Order {
  id                  String         @id           @default(uuid())
  status              OrderStatus
  customerId          String?
  total               Float          @default(0)
  customer            Customer?      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  items               Json
  deliveryItems       Json?          // Items for the waiter to deliver
  locationName        String
  location            Location       @relation(fields: [locationName], references: [name])
  assignedToKitchen   String?        
  assignedToWaiter    String?      
  kitchenAssignedAt   DateTime?    
  readyAt             DateTime?    
  waiterAssignedAt    DateTime?     
  deliveredAt         DateTime?        
  kitchenStaff        User?          @relation("KitchenOrders", fields: [assignedToKitchen], references: [id])
  waiter              User?          @relation("WaiterOrders", fields: [assignedToWaiter], references: [id])
  temporaryCustomerId String?
  temporaryCustomer   TemporaryCustomer? @relation(fields: [temporaryCustomerId], references: [id], onDelete: Cascade)
  charge              Charge?        
}

enum OrderStatus {
  PENDING       // Order created, waiting for kitchen to pick up
  PREPARING     // Kitchen staff picked up the order and is preparing it
  READY         // Kitchen completed preparation, waiting for waiter to pick up
  ASSIGNED      // Waiter picked up the order and is serving it
  DELIVERED     // Order completed and delivered to customer
  CANCELLED     // Order was cancelled
}


enum NotificationType {
  TASK            // General task
  MAINTENANCE     // Maintenance/repair task
  CLEANING        // Room cleaning task
  GUEST_REQUEST   // Guest-related request
  BIRTHDAY        // Guest birthday celebration
  CHECK_IN        // Check-in related
  CHECK_OUT       // Check-out related
  PAYMENT         // Payment related
  KITCHEN         // Kitchen/food related
  SERVICE         // Service/waiter related
  ADMIN           // Administrative task
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum AutomatedTaskTriggerType {
  DAY_OF_STAY     // Trigger on specific day of guest stay
  DAILY           // Trigger daily at specific time
  WEEKLY          // Trigger weekly on specific day/time
  MONTHLY         // Trigger monthly on specific date/time
  CHECK_IN        // Trigger on guest check-in
  CHECK_OUT       // Trigger on guest check-out
}

enum OrderItemRole {
  KITCHEN
  WAITER
}
