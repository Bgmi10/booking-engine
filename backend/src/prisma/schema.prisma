generator client {
  provider = "prisma-client-js" 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {             
  id                        String                      @id @default(uuid())
  name                      String                   
  email                     String                      @unique
  password                  String                   
  createdAt                 DateTime                    @default(now())
  role                      Role                   
  phone                     String?                   
  basePrice                 Float?
  numberPlate               String?                   
  updatedAt                 DateTime                    @updatedAt
  assignedNotifications     Notification[]              @relation("AssignedNotifications")
  createdNotifications      Notification[]              @relation("CreatedNotifications")
  completedNotifications    Notification[]              @relation("CompletedNotifications")
  notificationAttachments   NotificationAttachment[]
  assignedAutomatedTasks    AutomatedTaskRule[]
  kitchenOrders             Order[]                     @relation("KitchenOrders")
  waiterOrders              Order[]                     @relation("WaiterOrders")
  waiterCashSummaries       WaiterCashSummary[]         @relation("WaiterCashSummaries")
  managerVerifications      WaiterCashSummary[]         @relation("ManagerVerifications")
  cashDepositsProcessed     CashDeposit[]               @relation("CashProcessingManager")
  managerDailySummaries     ManagerDailySummary[]       @relation("ManagerDailySummaries")
  licensePlateEntries       LicensePlateEntry[]         @relation("UserLicensePlates")
  bulkOverRideLogs          BulkOverRideLogs[]
  auditLogs                 BookingAuditLog[]
}            

model Room {
  id                String           @id @default(uuid())
  name              String        
  description       String        
  amenities         String[]        
  price             Float        
  capacity          Int        
  maxCapacityWithExtraBed Int?      // Maximum capacity with extra bed
  extraBedPrice     Float?           // Price for extra bed per night
  allowsExtraBed    Boolean          @default(false) // Whether room allows extra bed
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  needsChannelSync      Boolean      @default(false)
  lastChannelSyncAt     DateTime?
  channelSyncFailCount  Int          @default(0)
  images            RoomImage[]
  bookings          Booking[]
  holds             TemporaryHold[]
  RoomRate          RoomRate[]
  rateDatePrices    RateDatePrice[]
  notifications     Notification[]
  beds24Mapping     Beds24RoomMapping?
  
  @@index([needsChannelSync])
}

model RoomImage {
  id          String   @id @default(uuid())
  url         String
  roomId      String
  room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Customer {      
  id                  String              @id @default(uuid())
  guestFirstName      String      
  guestMiddleName     String?      
  guestLastName       String      
  guestEmail          String              @unique
  guestPhone          String       
  guestNationality    String?      
  dob                 DateTime?      
  passportNumber      String?      
  vipStatus           Boolean             @default(false)
  anniversaryDate     DateTime?      
  passportExpiry      DateTime?      
  totalNightStayed    Int                 @default(0)
  totalMoneySpent     Float               @default(0)
  favoriteItems       Json?      
  stripeCustomerId    String?      
  updatedAt           DateTime            @updatedAt
  createdAt           DateTime            @default(now())
  accountActivated     Boolean             @default(false)
  emailVerified        Boolean             @default(false)
  emailVerifyToken     String?
  lastLogin            DateTime?
  password             String?
  temporaryAccessToken String?
  bookings            Booking[]
  paymentIntents      PaymentIntent[]
  groupName           String?
  groupEmail          String?
  charges             Charge[]
  notifications       Notification[]
  orders              Order[]
  weddingProposals    WeddingProposal[]
  @@index([guestEmail, guestFirstName])
}

model Charge {
  id                    String                @id   @default(uuid())
  amount                Float    
  currency              String                @default("eur")
  description           String?   
  gatekeeperUrl         String?   
  status                ChargeStatus          @default(PENDING)
  expiredAt             DateTime?         
  createdAt             DateTime              @default(now())
  paidAt                DateTime?   
  stripePaymentIntentId String?   
  paymentMethod         String?   
  paymentUrl            String?            
  createdBy             String?   
  customerId            String?      
  customer              Customer?             @relation(fields: [customerId], references: [id])
  paymentIntentId       String?
  paymentIntent         PaymentIntent?        @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)
  adminNotes            String?   
  refundInitiatedBy     String?               // Admin who initiated the refund
  refundReason          String?               // Notes/reason for the refund
  refundedAt            DateTime?             // When the refund was processed
  orderId               String?               @unique
  order                 Order?                @relation(fields: [orderId], references: [id], onDelete: Cascade)
  tempCustomerId        String?  
  tempCustomer          TemporaryCustomer?    @relation(fields: [tempCustomerId], references: [id])  
  bookingGroupId        String?
  bookingGroup          BookingGroup?         @relation(fields: [bookingGroupId], references: [id], onDelete: SetNull)
}
        
model Booking {        
  id                  String                @id @default(uuid())
  totalGuests         Int        
  checkIn             DateTime          
  status              BookingStatus         @default(PENDING)
  checkOut            DateTime          
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  room                Room                  @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId              String  
  paymentIntentId     String?
  paymentIntent       PaymentIntent?        @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)
  metadata            Json?
  request             String?
  customerId          String
  customer            Customer              @relation(fields: [customerId], references: [id], onDelete: Cascade)
  enhancementBookings EnhancementBooking[]
  voucherUsages       VoucherUsage[]
  voucherCode         String?         
  voucherDiscount     Float?           
  voucherProducts     Json?          
  groupId             String?
  carNumberPlate      String?          
  notifications       Notification[]
  
  // Extra bed fields
  hasExtraBed         Boolean               @default(false) // Whether booking includes extra bed
  extraBedCount       Int                   @default(0) // Number of extra beds
  extraBedPrice       Float?                // Price charged for extra bed per night
  
  // New fields for payment structure tracking
  paymentStructure    PaymentStructure      @default(FULL_PAYMENT)
  totalAmount         Float?
  prepaidAmount       Float?                // 30% paid
  remainingAmount     Float?                // 70% remaining
  remainingDueDate    DateTime?             // When 70% is due
  finalPaymentStatus  PaymentStatus?        // Status of 70% payment
  ratePolicyId        String?               // Track which rate policy was used
  refundAmount        Float?                // Amount refunded for this specific booking
  refundStatus        RefundStatus          @default(NOT_REFUNDED) // Track individual booking refund status
  
  // Channel sync tracking
  needsChannelSync      Boolean      @default(false)
  lastChannelSyncAt     DateTime?
  channelSyncFailCount  Int          @default(0)
  channelBookingId      String?      // Store Beds24 or other channel booking ID
  
  auditLogs           BookingAuditLog[]
  
  @@index([roomId, checkIn, checkOut, status])
  @@index([refundStatus])
  @@index([needsChannelSync])
}

model Enhancement {
  id                  String                     @id @default(uuid())
  image               String?
  title               String
  description         String
  price               Float
  pricingType         EnhancementPricingType
  availableDays       String[]
  seasonal            Boolean                    @default(false)
  seasonStart         DateTime?
  seasonEnd           DateTime?
  isActive            Boolean                    @default(true)
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
  enhancementBookings EnhancementBooking[]
} 

enum EnhancementPricingType {
  PER_GUEST
  PER_BOOKING
  PER_DAY
}

model EnhancementBooking {
  id             String       @id @default(uuid())
  booking        Booking      @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId      String
  enhancement    Enhancement  @relation(fields: [enhancementId], references: [id], onDelete: Cascade)
  enhancementId  String
  quantity       Int
  dateSelected   DateTime?
  notes          String?
  createdAt      DateTime     @default(now())
}
 
model TemporaryHold {
  id              String         @id @default(uuid())
  checkIn         DateTime      
  checkOut        DateTime      
  createdAt       DateTime       @default(now())
  expiresAt       DateTime      
  room            Room           @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId          String
  paymentIntentId String?
  paymentIntent   PaymentIntent? @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)
  @@index([expiresAt, checkIn, checkOut, roomId])
}

model PaymentIntent {
  id                    String              @id @default(uuid())
  stripePaymentIntentId String?             @unique
  stripeSessionId       String?             @unique
  stripePaymentLinkId   String?            
  amount                Float    
  currency              String              @default("eur")
  status                PaymentIntentStatus @default(CREATED)
  paymentMethod         PaymentMethod?      @default(STRIPE)
  actualPaymentMethod   PaymentMethod?      // what was actually used
  bookingData           String           
  customerData          String          
  taxAmount             Float
  totalAmount           Float
  outstandingAmount     Float?              // Outstanding amount customer owes us
  isSoftDeleted         Boolean?            @default(false)
  paymentStructure      PaymentStructure    @default(FULL_PAYMENT)
  prepaidAmount         Float?              // Amount paid upfront (30%)
  remainingAmount       Float?              // Amount due on checkin (70%)
  remainingDueDate      DateTime?           // When remaining amount is due
  secondPaymentIntentId String?             // Stripe PaymentIntent ID for remaining amount
  secondPaymentLinkId   String?             // Stripe PaymentLink ID for second payment
  secondPaymentExpiresAt DateTime?          // Expiry time for second payment link
  secondPaymentStatus   PaymentIntentStatus? // Status of second payment (CREATED, SUCCEEDED, etc.)
  createdByAdmin        Boolean             @default(false)
  adminUserId           String?   
  adminNotes            String?   
  refundStatus          RefundStatus        @default(NOT_REFUNDED) // Tra refund lifecycle
  
  // Comprehensive tracking fields
  cancelledBy           String?             // Admin who cancelled
  cancelledAt           DateTime?           // When cancelled
  cancellationReason    String?             // Why cancelled
  refundInitiatedBy     String?             // Admin who initiated refund  
  refundReason          String?             // Refund reason
  refundedAt            DateTime?           // When refunded
  expiresAt             DateTime?   
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  paidAt                DateTime?
  customerId            String?  
  customer              Customer?           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  bookingGroupId        String?
  bookingGroup          BookingGroup?       @relation(fields: [bookingGroupId], references: [id], onDelete: SetNull)
  bookings              Booking[]        
  temporaryHolds        TemporaryHold[]
  payments              Payment[] 
  orders                Order[]
  charges               Charge[]
  voucherCode           String?           
  voucherDiscount       Float?            
  voucherUsages         VoucherUsage[]
  auditLogs             BookingAuditLog[]    
  @@index([status, expiresAt])
  @@index([stripePaymentIntentId])
  @@index([stripeSessionId])
  @@index([bookingGroupId])
  @@index([refundStatus])
}

model Payment {
  id                    String           @id @default(uuid())
  stripeSessionId       String?          @unique
  stripePaymentIntentId String?          @unique
  amount                Float
  currency              String
  status                PaymentStatus
  
  // New fields for payment tracking
  paymentType           PaymentType      @default(FULL_PAYMENT)
  installmentNumber     Int?             // 1 for first payment, 2 for second
  
  createdAt             DateTime         @default(now())
  paymentIntentId       String?
  paymentIntent         PaymentIntent?   @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)
}

model BookingGroup {
  id                    String             @id @default(uuid())
  groupName             String?           
  isAutoGrouped         Boolean            @default(false) 
  outstandingAmount     Float?    
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  paymentIntents        PaymentIntent[]
  charges               Charge[]    
  orders                Order[]
  auditLogs             BookingAuditLog[]
}

model RatePolicy {
  id                    String   @id @default(uuid())
  name                  String
  description           String
  isActive              Boolean  @default(true)
  refundable            Boolean? @default(false)
  prepayPercentage      Int?     // For deposits (not currently used with new split structure)
  fullPaymentDays       Int?     // Days before arrival when remaining payment is due
  changeAllowedDays     Int?     // Days before arrival when changes are allowed
  rebookValidityDays    Int?     // Days to rebook if cancelled
  adjustmentPercentage  Int?
  basePrice             Float?               // Base price for this rate policy
  paymentStructure      PaymentStructure     @default(FULL_PAYMENT)
  cancellationPolicy    CancellationPolicy   @default(FLEXIBLE)
  
  // Channel sync tracking
  needsChannelSync      Boolean      @default(false)
  lastChannelSyncAt     DateTime?
  channelSyncFailCount  Int          @default(0)
  
  bulkOverRideLogs      BulkOverRideLogs[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  roomRates             RoomRate[]
  rateDatePrices        RateDatePrice[]
  beds24RatePolicyMappings Beds24RatePolicyMapping[]
  
  @@index([needsChannelSync])
}

model RoomRate {
  id              String     @id @default(uuid())
  room            Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId          String
  ratePolicy      RatePolicy @relation(fields: [ratePolicyId], references: [id], onDelete: Cascade)
  ratePolicyId    String
  percentageAdjustment Float? // Percentage adjustment from rate policy base price (can be positive or negative)
  isActive        Boolean    @default(true) // Can deactivate specific room-policy combinations
  validFrom       DateTime?  // When this rate becomes valid
  validTo         DateTime?  // When this rate expires
  priority        Int        @default(0)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  @@index([roomId, ratePolicyId])
  @@index([roomId, isActive])
  @@unique([roomId, ratePolicyId])
}


model RateDatePrice {
  id              String        @id @default(uuid())
  ratePolicy      RatePolicy    @relation(fields: [ratePolicyId], references: [id], onDelete: Cascade)
  ratePolicyId    String
  room            Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId          String
  date            DateTime    
  price           Float        
  priceType       RatePriceType @default(ROOM_OVERRIDE) 
  isActive        Boolean       @default(true)
  needsChannelSync      Boolean      @default(false)
  lastChannelSyncAt     DateTime?
  channelSyncFailCount  Int          @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@unique([ratePolicyId, roomId, date])
  @@index([ratePolicyId, date, isActive])
  @@index([roomId, date, isActive])
  @@index([date, isActive])
  @@index([needsChannelSync])
}

model GeneralSettings {        
  id                                String        @id            @default(uuid())
  autoGroupingRoomCount             Int                          @default(2)
  minStayDays                       Int                          @default(2)
  updatedAt                         DateTime                     @updatedAt
  taxPercentage                     Float?               
  chargePaymentConfig               String?               
  dahuaApiUrl                       String?                      // may be usful in future
  dahuaUsername                     String?                      // may be usful in future
  dahuaPassword                     String?                      // may be usful in future
  dahuaIsEnabled                    Boolean                      @default(false) // may be usful in future
  dahuaGateId                       String?                      // may be usful in future
  dahuaLicensePlateExpiryHours      Int                          @default(24) // may be usful in future
  licensePlateExpiryDays            Int                          @default(30)
  licensePlateDailyTriggerTime      String                       @default("00:00")
  dailyBookingStartTime             String?                      @default("00:00")
}

model Otp {
  id        String   @id @default(uuid())
  email     String   @unique
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}
       
model BookingRestriction {       
  id                                   String                    @id @default(uuid())
  name                                 String                    
  description                          String?                   
  type                                 RestrictionType       
  startDate                            DateTime       
  endDate                              DateTime       
  daysOfWeek                           Int[]          
  rateScope                            RateScope                 @default(ALL_RATES)
  ratePolicyIds                         String[]        
  roomScope                            RoomScope                 @default(ALL_ROOMS)
  roomIds                              String[]         
  minLength                            Int?             
  maxLength                            Int?             
  minAdvance                           Int?        
  maxAdvance                           Int?        
  sameDayCutoffTime                    String?          
  priority                             Int                       @default(0)
  isActive                             Boolean                   @default(true)
  
  // Channel sync tracking
  needsChannelSync      Boolean      @default(false)
  lastChannelSyncAt     DateTime?
  channelSyncFailCount  Int          @default(0)
  
  exceptions                           RestrictionException[]
  createdAt                            DateTime                  @default(now())
  updatedAt                            DateTime                  @updatedAt
  @@index([startDate, endDate])
  @@index([type, isActive])
  @@index([needsChannelSync])
}

model RestrictionException {
  id                                  String             @id @default(uuid())
  bookingRestriction                  BookingRestriction @relation(fields: [bookingRestrictionId], references: [id], onDelete: Cascade)
  bookingRestrictionId                String
  minLengthOverride                   Int?  
  maxLengthOverride                   Int?
  exceptionStartDate                  DateTime?
  exceptionEndDate                    DateTime?
  exceptionDaysOfWeek                 Int[]
  rateScope                           RateScope?
  ratePolicyIds                       String[]
  roomScope                           RoomScope?
  roomIds                             String[]
  isActive                            Boolean            @default(true)
  createdAt                           DateTime           @default(now())
  @@index([exceptionStartDate, exceptionEndDate])
}

model EmailTemplate {
  id          String         @id @default(cuid())
  name        String        
  type        String        
  subject     String        
  html        String         @db.Text  
  design      String?        @db.Text 
  isActive    Boolean        @default(false)
  version     Int            @default(1)
  variables   Json?         
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  @@index([type, isActive])
}

model VoucherProduct {
  id          String      @id @default(cuid())
  name        String
  description String?
  imageUrl    String
  value       Float
  isActive    Boolean
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  vouchers   Voucher[]    @relation("VoucherProducts")
  @@index([isActive])
}

model Voucher {
  id                                String              @id @default(cuid())
  code                              String              @unique
  name                              String
  description                       String?
  type                              VoucherType 
  discountPercent                   Float?
  fixedAmount                       Float? 
  maxUsage                          Int?
  currentUsage                      Int                 @default(0)
  maxUsagePerUser                   Int?
  validFrom                         DateTime
  validTill                         DateTime
  validFromTime                     String?             @default("00:00") // Time in HH:MM format (Italian time)
  validTillTime                     String?             @default("23:59") // Time in HH:MM format (Italian time)
  roomScope                         VoucherRoomScope    @default(ALL_ROOMS)
  roomIds                           String[]
  rateScope                         VoucherRateScope    @default(ALL_RATES)
  ratePolicyIds                     String[] 
  isActive                          Boolean  
  productIds                        String[] 
  createdAt                         DateTime            @default(now())
  updatedAt                         DateTime            @updatedAt
  createdBy                         String? 
  products                          VoucherProduct[]    @relation("VoucherProducts")
  usages                            VoucherUsage[]
  @@index([code, isActive])
  @@index([validFrom, validTill])
  @@index([type, isActive])
}

model VoucherUsage {
  id                           String              @id @default(uuid())
  voucher                      Voucher             @relation(fields: [voucherId], references: [id], onDelete: Cascade)
  voucherId                    String
  usedBy                       String?            
  usedAt                       DateTime            @default(now())
  booking                      Booking?            @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId                    String?
  paymentIntent                PaymentIntent?      @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)
  paymentIntentId              String?
  discountAmount               Float?        
  originalAmount               Float?             
  finalAmount                  Float?            
  productsReceived             Json?
  status                       VoucherUsageStatus  @default(APPLIED)
  @@index([voucherId, usedAt])
  @@index([bookingId])
  @@index([paymentIntentId])
}

enum VoucherType {
  DISCOUNT    
  FIXED       
  PRODUCT   
}

enum VoucherRoomScope {
  ALL_ROOMS       
  SPECIFIC_ROOMS 
}

enum VoucherRateScope {
  ALL_RATES      
  SPECIFIC_RATES
}

enum VoucherUsageStatus {
  APPLIED     
  REFUNDED    // Voucher usage was refunded
  CANCELLED   // Voucher usage was cancelled
}

enum ChargeStatus {
  PENDING
  SUCCEEDED
  FAILED
  EXPIRED
  REFUNDED
}

enum PaymentIntentStatus {
  CREATED           // Admin created the payment intent
  PAYMENT_LINK_SENT // Payment link sent to customer
  PENDING           // Customer initiated payment
  PROCESSING        // Payment being processed
  SUCCEEDED         // Payment completed successfully
  FAILED            // Payment failed
  CANCELLED         // Payment cancelled
  EXPIRED           // Payment expired
  REFUNDED          // Payment refunded
}

enum RefundStatus {
  NOT_REFUNDED              // No refund requested or processed
  CANCELLED_NO_REFUND       // Cancelled by admin, no refund processed, can refund later
  REFUND_PENDING            // Refund initiated but not yet processed
  PARTIALLY_REFUNDED        // Partial refund processed
  FULLY_REFUNDED            // Full refund processed
  REFUND_DENIED             // Admin decided not to refund after cancellation
}

enum PaymentMethod {
  STRIPE
  CASH
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  REFUNDED
  FAILED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  REFUNDED
  CANCELLED
}

enum Role {
  ADMIN
  USER
  MANAGER
  RECEPTION
  CLEANER
  MAINTENANCE
  KITCHEN
  WAITER
}

enum RestrictionType {
  CLOSE_TO_STAY        // Cannot stay overnight on specified dates
  CLOSE_TO_ARRIVAL     // Cannot check in on specified dates  
  CLOSE_TO_DEPARTURE   // Cannot check out on specified dates
  MIN_LENGTH           // Minimum stay requirement
  MAX_LENGTH           // Maximum stay requirement
  ADVANCE_BOOKING      // Advance booking requirements
}

enum RateScope {
  ALL_RATES           // Apply to all rate policies
  SPECIFIC_RATES      // Apply to specific rate policies only
  BASE_RATE           // Apply to base rate only
}

enum RoomScope {
  ALL_ROOMS           // Apply to all rooms
  SPECIFIC_ROOMS      // Apply to specific rooms only
}

model Notification {
  id              String              @id @default(uuid())
  title           String
  description     String?
  type            NotificationType
  priority        NotificationPriority @default(MEDIUM)
  status          NotificationStatus   @default(PENDING)
  
  // Assignment
  assignedTo      String?             // User ID
  assignedBy      String?              // User ID who created/assigned
  assignedRole    Role?               // Role-based assignment
  
  // Guest association (optional)
  guestId         String?             // Customer ID
  guestName       String?             // Guest name for display
  
  // Room association (optional)
  roomId          String?             // Room ID
  roomName        String?             // Room name for display
  
  // Booking association (optional)
  bookingId       String?             // Booking ID
  
  // Due date and completion
  dueDate         DateTime?
  completedAt     DateTime?
  completedBy     String?             // User ID who completed
  
  // Attachments
  attachments     NotificationAttachment[]
  
  // Automated task info
  isAutomated     Boolean             @default(false)
  automatedRuleId String?             // Reference to automated rule
  
  // Timestamps
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  assignedUser    User?               @relation("AssignedNotifications", fields: [assignedTo], references: [id])
  createdByUser   User?               @relation("CreatedNotifications", fields: [assignedBy], references: [id])
  completedByUser User?               @relation("CompletedNotifications", fields: [completedBy], references: [id])
  guest           Customer?           @relation(fields: [guestId], references: [id])
  room            Room?               @relation(fields: [roomId], references: [id])
  booking         Booking?            @relation(fields: [bookingId], references: [id])
  automatedRule   AutomatedTaskRule?  @relation(fields: [automatedRuleId], references: [id])
  
  @@index([assignedTo, status])
  @@index([assignedRole, status])
  @@index([dueDate])
  @@index([guestId])
  @@index([roomId])
  @@index([bookingId])
}

model NotificationAttachment {
  id              String        @id @default(uuid())
  notificationId  String
  fileName        String
  fileUrl         String
  fileType        String
  fileSize        Int
  uploadedBy      String
  createdAt       DateTime      @default(now())
  
  // Relations
  notification    Notification  @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  uploadedByUser  User          @relation(fields: [uploadedBy], references: [id])
}

model AutomatedTaskRule {
  id              String              @id @default(uuid())
  name            String
  description     String?
  taskTitle       String
  taskDescription String?
  
  // Trigger conditions
  triggerType     AutomatedTaskTriggerType
  triggerDay      Int?                // Day of stay (e.g., 3 for 3rd day)
  triggerTime     String?             // Time of day (e.g., "09:00")
  
  // Assignment
  assignedRole    Role
  assignedTo      String?             // Specific user ID (optional)
  
  // Room scope
  roomScope       RoomScope           @default(ALL_ROOMS)
  roomIds         String[]            // Specific room IDs when roomScope is SPECIFIC_ROOMS
  
  // Task details
  priority        NotificationPriority @default(MEDIUM)
  dueDateOffset   Int?                // Hours after trigger to set as due
  
  // Active status
  isActive        Boolean             @default(true)
  
  // Timestamps
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  assignedUser    User?               @relation(fields: [assignedTo], references: [id])
  notifications   Notification[]
  
  @@index([isActive, triggerType])
  @@index([roomScope])
}

model TemporaryCustomer {
  id        String   @id @default(uuid())
  surname   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  charges   Charge[]
  stripeCustomerId String?
}

model Location {
  id              String          @id         @default(uuid())
  name            String          @unique
  updateAt        DateTime        @updatedAt
  orderCategories OrderCategory[]
  order           Order[]
}

model OrderCategory {
  id                String       @id             @default(uuid())
  name              String
  description       String?
  imageUrl          String
  orderItems        OrderItem[]
  isAvailable       Boolean?     @default(true)
  onlyForAdmin      Boolean      @default(false)
  availabilityRule  AvailabilityRule?
  locations         Location[]
}   

model OrderItem {
  id               String          @id         @default(uuid())
  name             String 
  description      String 
  imageUrl         String? 
  price            Float 
  tax              Float?
  isAvailable      Boolean?        @default(true)
  categories       OrderCategory[] 
  role             OrderItemRole 
  createdAt        DateTime        @default(now())
} 

model Product {
  id           String               @id @default(uuid())
  name         String
  description  String?
  price        Float
  pricingModel ProductPricingModel  @default(FIXED)
  type         ProductType          @default(WEDDING)
  category     String
  sampleMenu   Json?
  image        String?
  isActive     Boolean              @default(true)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  itineraryItems ItineraryItem[]    // Add this relation
}

// Wedding Proposal System Models
model WeddingProposal { 
  id                             String           @id @default(uuid())
  name                           String 
  status                         ProposalStatus   @default(DRAFT)
  weddingDate                    DateTime 
  mainGuestCount                 Int 
  termsAndConditions             String? 
  customerId                     String 
  customer                       Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  holdExpiresAt                  DateTime? 
  createdAt                      DateTime         @default(now())
  updatedAt                      DateTime         @updatedAt
  itineraryDays                  ItineraryDay[]
  paymentPlan                    PaymentPlan?
  sentEmailCount                 Int              @default(0)
  lastEmailSentAt                DateTime?       
  finalGuestConfirmationSent     Boolean          @default(false)
  finalGuestConfirmationSentAt   DateTime?       
  finalGuestCountConfirmed       Boolean          @default(false)
  finalGuestCountConfirmedAt     DateTime?

  externalVendors                ExternalVendor[]
  serviceRequests                WeddingServiceRequest[]
  
  @@map("wedding_proposals")
  @@index([customerId])
  @@index([status, weddingDate])
}

model ItineraryDay {
  id          String   @id @default(uuid())
  dayNumber   Int      // Day 1, Day 2, etc.
  date        DateTime
  
  proposal    WeddingProposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId  String
  
  items       ItineraryItem[]
  
  // Relation to service requests specific to this day
  serviceRequests WeddingServiceRequest[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([proposalId, dayNumber])
}

model ItineraryItem {
  id            String      @id @default(uuid())
  
  day           ItineraryDay @relation(fields: [dayId], references: [id], onDelete: Cascade)
  dayId         String
  
  // Link to the product
  product       Product     @relation(fields: [productId], references: [id])
  productId     String
  
  // Specific details for this instance
  guestCount    Int
  status        ItineraryItemStatus @default(OPTIONAL)
  price         Float       // The price for this specific item
  notes         String?
  
  // Custom menu for this specific item
  customMenu    Json?       // For storing the customized menu for this specific item
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PaymentPlan {
  id          String      @id @default(uuid())
  
  proposal    WeddingProposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId  String      @unique
  
  // Replace JSON field with a relationship
  stages      PaymentStage[]
  
  totalAmount Float       // Total amount for the payment plan
  currency    String      @default("eur")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PaymentStage {
  id                    String               @id @default(uuid())
  paymentPlan           PaymentPlan          @relation(fields: [paymentPlanId], references: [id], onDelete: Cascade)
  paymentPlanId         String
  description           String      // e.g., "Initial deposit", "Accommodation payment"
  amount                Float       // Fixed amount for this stage
  dueDate               DateTime    // When this payment is due
  status                PaymentStageStatus  @default(PENDING)
  stripePaymentIntentId String?
  stripePaymentUrl      String?
  reminderSent    Boolean             @default(false)
  paidAt          DateTime?
  reminders       PaymentReminder[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

model PaymentReminder {
  id             String       @id @default(cuid())
  paymentStageId String
  paymentStage   PaymentStage @relation(fields: [paymentStageId], references: [id], onDelete: Cascade)
  type           String       
  sentAt         DateTime     @default(now())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([paymentStageId])
  @@index([type])
  @@index([sentAt])
}


enum PaymentStageStatus {
  PENDING
  PROCESSING
  PAID
  OVERDUE
  CANCELLED
}

enum ProposalStatus {
  DRAFT       // Being built by admin
  SENT        // Sent to customer
  ACCEPTED    // Customer has accepted
  CONFIRMED   // All items confirmed
  COMPLETED   // Wedding has happened
  CANCELLED
}

enum ItineraryItemStatus {
  CONFIRMED
  OPTIONAL
}

enum ProductType {
  REGULAR
  WEDDING
  RESTAURANT
}

enum ProductPricingModel {
  FIXED
  PER_PERSON
}

// Models for External Vendor Contacts
model ExternalVendor {
  id          String   @id @default(uuid())
  type        String   // e.g., "Photographer", "Hair & Makeup"
  name        String
  email       String?
  phone       String?
  notes       String?
  
  proposal    WeddingProposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId  String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([proposalId])
}

// Models for Bespoke Wedding Service Requests
model WeddingServiceRequest {
  id             String                 @id @default(uuid())
  title          String
  description    String                 @db.Text
  status         ServiceRequestStatus   @default(PENDING)
  
  // Admin-defined quote
  price          Float?
  guestCount     Int?
  
  // Relations
  proposal       WeddingProposal        @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId     String
  
  itineraryDay   ItineraryDay?          @relation(fields: [itineraryDayId], references: [id])
  itineraryDayId String?
  
  messages       WeddingServiceMessage[]
  
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  @@index([proposalId])
  @@index([itineraryDayId])
}

model WeddingServiceMessage {
  id          String    @id @default(uuid())
  text        String?   @db.Text
  sender      MessageSender
  
  request     WeddingServiceRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId   String
  
  attachments WeddingServiceAttachment[]
  
  createdAt   DateTime  @default(now())

  @@index([requestId])
}

model WeddingServiceAttachment {
  id          String    @id @default(uuid())
  url         String
  fileName    String
  fileType    String
  fileSize    Int
  
  message     WeddingServiceMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId   String
  
  createdAt   DateTime  @default(now())

  @@index([messageId])
}

enum ServiceRequestStatus {
  PENDING   // Guest has submitted the request
  QUOTED    // Admin has provided a price
  ACCEPTED  // Guest has accepted the quote
  REJECTED  // Guest has rejected the quote
  COMPLETED // Service delivered
  CANCELLED // Request cancelled
}

enum MessageSender {
  GUEST
  ADMIN
}

model AvailabilityRule {
  id                String         @id @default(uuid())
  name              String         // e.g., "Weekday Mornings", "Weekend Brunch"
  orderCategoryId   String         @unique
  orderCategory     OrderCategory  @relation(fields: [orderCategoryId], references: [id], onDelete: Cascade)
  startTime         String         // "HH:MM" format, e.g., "07:00"
  endTime           String         // "HH:MM" format, e.g., "11:00"
  daysOfWeek        Int[]          // [0-6] where 0=Sunday, 1=Monday, etc.
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model Order {
  id                  String             @id           @default(uuid())
  status              OrderStatus    
  customerId          String?    
  total               Float              @default(0)
  customer            Customer?          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  paymentIntentId     String?    
  paymentIntent       PaymentIntent?     @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  items               Json    
  deliveryItems       Json?              // Items for the waiter to deliver
  locationName        String?            // customer purpose
  locationNames       String[]            @default([])  // useful for admin 
  location            Location?           @relation(fields: [locationName], references: [name]) // useful for customer
  assignedToKitchen   String?            
  assignedToWaiter    String?          
  kitchenAssignedAt   DateTime?        
  readyAt             DateTime?        
  waiterAssignedAt    DateTime?         
  deliveredAt         DateTime?            
  kitchenStaff        User?              @relation("KitchenOrders", fields: [assignedToKitchen], references: [id])
  waiter              User?              @relation("WaiterOrders", fields: [assignedToWaiter], references: [id])
  temporaryCustomerId String?
  temporaryCustomer   TemporaryCustomer? @relation(fields: [temporaryCustomerId], references: [id], onDelete: Cascade)
  charge              Charge?
  bookingGroupId      String?
  bookingGroup        BookingGroup?        @relation(fields: [bookingGroupId], references: [id], onDelete: Cascade)        
}

model BulkOverRideLogs {
  id                 String         @id @default(uuid())
  userId             String     
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  ratePolicyId       String        
  ratePolicy         RatePolicy         @relation(fields: [ratePolicyId], references: [id], onDelete: Cascade)
  actionType         ActionTypeEnum      
  dateRangeStart     DateTime
  dateRangeEnd       DateTime
  roomsAffected      String[]       
  overRideDetails    Json
  totalRoomsAffected Int            @default(0)
  totalDatesAffected Int            @default(0)
  daysAffected       Int[]          @default([]) // Array of day indices (0=Sunday, 6=Saturday)
  createdAt          DateTime       @default(now())
}

enum ActionTypeEnum { 
 BULK_OVERRIDE
 BULK_INCREASE
 BULK_DECREASE
}

enum OrderStatus {
  PENDING       // Order created, waiting for kitchen to pick up
  PREPARING     // Kitchen staff picked up the order and is preparing it
  READY         // Kitchen completed preparation, waiting for waiter to pick up
  ASSIGNED      // Waiter picked up the order and is serving it
  DELIVERED     // Order completed and delivered to customer
  CANCELLED     // Order was cancelled
}


enum NotificationType {
  TASK            // General task
  MAINTENANCE     // Maintenance/repair task
  CLEANING        // Room cleaning task
  GUEST_REQUEST   // Guest-related request
  BIRTHDAY        // Guest birthday celebration
  CHECK_IN        // Check-in related
  CHECK_OUT       // Check-out related
  PAYMENT         // Payment related
  KITCHEN         // Kitchen/food related
  SERVICE         // Service/waiter related
  ADMIN           // Administrative task
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum AutomatedTaskTriggerType {
  DAY_OF_STAY     // Trigger on specific day of guest stay
  DAILY           // Trigger daily at specific time
  WEEKLY          // Trigger weekly on specific day/time
  MONTHLY         // Trigger monthly on specific date/time
  CHECK_IN        // Trigger on guest check-in
  CHECK_OUT       // Trigger on guest check-out
}

enum OrderItemRole {
  ANY
  KITCHEN
  WAITER
}

enum PaymentStructure {
  FULL_PAYMENT        // 100% upfront payment
  SPLIT_PAYMENT       // 30% now, 70% on check-in
}

enum CancellationPolicy {
  FLEXIBLE            // Cancel anytime with full refund
  MODERATE            // Cancel up to 30 days before arrival
  STRICT              // No cancel, but allow changes up to 30 days before arrival
  NON_REFUNDABLE      // No cancel, no change allowed
}

enum PaymentType {
  FULL_PAYMENT        // Single full payment
  FIRST_INSTALLMENT   // 30% initial payment
  SECOND_INSTALLMENT  // 70% remaining payment
}

enum RatePriceType {
  BASE_OVERRIDE       // Override base price for all rooms under this rate policy
  ROOM_INCREASE       // Add amount to base room price
  ROOM_OVERRIDE       // Complete override of room price for this rate policy
}

model BankDetails {
  id          String   @id @default(uuid())
  name        String   // Display name for the bank account
  bankName    String   // Name of the bank
  accountName String   // Account holder name
  accountNumber String // Bank account number
  iban        String?  // IBAN (International Bank Account Number)
  swiftCode   String?  // SWIFT/BIC code
  routingNumber String? // Routing number (for US banks)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Cash Management System Models
model CashCalculationSettings {
  id                    String   @id @default(uuid())
  calculationPeriodDays Int      @default(1) // Number of days for calculation period
  resetTime             String   @default("00:00") // Time when calculation period resets (Italian time)
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model RevenueSettings {
  id                    String   @id @default(uuid())
  autoReminders         Boolean  @default(true)
  reminderTime          String   @default("18:00")
  discrepancyThreshold  Float    @default(10.00)
  autoFinalizeDays      Int      @default(3)
  managerEmail          Boolean  @default(true)
  discrepancyAlerts     Boolean  @default(true)
  dailySummaryEmail     Boolean  @default(true)
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model WaiterCashSummary {
  id                    String                 @id @default(uuid())
  waiterId              String
  waiter                User                   @relation("WaiterCashSummaries", fields: [waiterId], references: [id], onDelete: Cascade)
  summaryDate           DateTime               // Date for this summary
  periodStart           DateTime               // Start of calculation period
  periodEnd             DateTime               // End of calculation period
  totalCashOrders       Float                  @default(0) // Total cash orders for the period
  outstandingBalance    Float                  @default(0) // Outstanding cash balance
  status                WaiterCashStatus       @default(PENDING)
  submittedAt           DateTime?              // When waiter submitted the summary
  verifiedAt            DateTime?              // When manager verified
  verifiedBy            String?                // Manager who verified
  verifyingManager      User?                  @relation("ManagerVerifications", fields: [verifiedBy], references: [id])
  deposits              CashDeposit[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  
  @@index([waiterId, summaryDate])
  @@index([status, summaryDate])
  @@unique([waiterId, summaryDate])
}

model CashDeposit {
  id                    String                 @id @default(uuid())
  cashSummaryId         String
  cashSummary           WaiterCashSummary      @relation(fields: [cashSummaryId], references: [id], onDelete: Cascade)
  amount                Float                  // Amount deposited by waiter
  actualReceived        Float?                 // Actual amount received by manager
  difference            Float?                 // Difference between deposited and received
  status                CashDepositStatus      @default(SUBMITTED)
  depositedAt           DateTime               @default(now()) // When waiter deposited
  processedAt           DateTime?              // When manager processed
  processedBy           String?                // Manager who processed
  processingManager     User?                  @relation("CashProcessingManager", fields: [processedBy], references: [id])
  notes                 String?                // Manager notes about the deposit
  acceptedLoss          Boolean                @default(false) // Whether manager accepted the loss
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  
  @@index([status, depositedAt])
  @@index([cashSummaryId])
}

model ManagerDailySummary {
  id                    String                 @id @default(uuid())
  managerId             String
  manager               User                   @relation("ManagerDailySummaries", fields: [managerId], references: [id], onDelete: Cascade)
  summaryDate           DateTime               // Date for this summary
  totalCashDeposited    Float                  @default(0) // Total cash deposited by all waiters
  totalCashReceived     Float                  @default(0) // Total cash actually received
  totalDiscrepancy      Float                  @default(0) // Total discrepancy amount
  totalAcceptedLoss     Float                  @default(0) // Total accepted losses
  waiterCount           Int                    @default(0) // Number of waiters processed
  status                ManagerSummaryStatus   @default(PENDING)
  finalizedAt           DateTime?              // When manager finalized the daily summary
  notes                 String?                // Manager notes for the day
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  
  @@index([managerId, summaryDate])
  @@index([status, summaryDate])
  @@unique([managerId, summaryDate])
}

// Enums for Cash Management
enum WaiterCashStatus {
  PENDING       // Waiting for waiter to submit
  SUBMITTED     // Waiter submitted for verification
  VERIFIED      // Manager verified and accepted
  DISCREPANCY   // There's a discrepancy in the cash
  COMPLETED     // All settled
}

enum CashDepositStatus {
  SUBMITTED     // Waiter submitted deposit
  ACCEPTED      // Manager accepted exact amount
  DISCREPANCY   // Manager found discrepancy
  LOSS_ACCEPTED // Manager accepted the loss
  COMPLETED     // Deposit fully processed
}

enum ManagerSummaryStatus {
  PENDING       // Daily summary in progress
  FINALIZED     // Manager finalized the daily summary
  REPORTED      // Summary reported to admin
}

model LicensePlateEntry {
  id                String             @id @default(uuid())
  plateNo           String             @unique
  type              LicensePlateType   @default(ALLOW_LIST)
  ownerName         String
  validStartTime    DateTime
  validEndTime      DateTime
  isActive          Boolean            @default(true)
  userId            String?          
  user              User?              @relation("UserLicensePlates", fields: [userId], references: [id], onDelete: SetNull)
  bookingId         String?        
  notes             String?
  createdBy         String          
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  @@index([plateNo, type, isActive])
  @@index([validStartTime, validEndTime])
  @@index([userId])
  @@index([bookingId])
}

enum LicensePlateType {
  ALLOW_LIST        // Allowed to enter
  BLOCK_LIST        // Blocked from entering
}

// Beds24 Channel Manager Integration Models
model Beds24RoomMapping {
  id              String    @id @default(uuid())
  localRoomId     String    // Reference to our Room model
  beds24RoomId    String    // Room ID from Beds24
  beds24RoomName  String?   // Room name from Beds24
  isActive        Boolean   @default(true)
  
  // Sync settings specific to this room
  autoSync        Boolean   @default(true)
  markupPercent   Float?    // Optional markup for this specific room
  minStay         Int       @default(1)
  maxStay         Int       @default(30)
  
  // Sync status tracking
  lastSyncAt      DateTime?
  syncStatus      String    @default("PENDING") // PENDING, SYNCED, FAILED
  needsSync       Boolean   @default(false)
  syncFailCount   Int       @default(0)
  lastSyncError   String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  room            Room      @relation(fields: [localRoomId], references: [id], onDelete: Cascade)
  ratePolicyMappings Beds24RatePolicyMapping[]
  
  @@unique([localRoomId])
  @@unique([beds24RoomId])
  @@index([isActive, autoSync])
  @@index([needsSync])
}

model Beds24RatePolicyMapping {
  id                    String              @id @default(uuid())
  beds24RoomMappingId   String              // FK to Beds24RoomMapping
  ratePolicyId          String              // FK to RatePolicy
  priceSlot             Int                 @default(1) // p1, p2, p3... up to p16
  markupPercent         Float?              // Optional channel-specific markup
  channelRateCode       String?             // Optional rate code for channel mapping
  priority              Int                 @default(0) // Display priority
  isActive              Boolean             @default(true)
  
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  // Relations
  beds24RoomMapping     Beds24RoomMapping   @relation(fields: [beds24RoomMappingId], references: [id], onDelete: Cascade)
  ratePolicy            RatePolicy          @relation(fields: [ratePolicyId], references: [id], onDelete: Cascade)
  
  @@unique([beds24RoomMappingId, ratePolicyId])
  @@unique([beds24RoomMappingId, priceSlot])
  @@index([isActive])
  @@index([beds24RoomMappingId])
}

// Comprehensive Audit Logging System
model BookingAuditLog {
  id                String         @id @default(uuid())
  entityType        AuditEntityType // PAYMENT_INTENT, BOOKING, ROOM_CHANGE, etc.
  entityId          String         // ID of the changed entity
  actionType        AuditActionType // CREATED, CANCELLED, REFUNDED, ROOM_CHANGED, etc.
  userId            String         // Admin who made the change
  user              User           @relation(fields: [userId], references: [id])
  reason            String?        // User-provided reason
  notes             String?        // Additional notes
  
  // Before/After tracking
  previousValues    Json?          // Previous state
  newValues         Json?          // New state
  changedFields     String[]       // Which fields changed
  
  // Context
  paymentIntentId   String?        // Related PaymentIntent
  paymentIntent     PaymentIntent? @relation(fields: [paymentIntentId], references: [id])
  bookingId         String?        // Related Booking
  booking           Booking?       @relation(fields: [bookingId], references: [id])
  bookingGroupId    String?        // Related BookingGroup
  bookingGroup      BookingGroup?  @relation(fields: [bookingGroupId], references: [id])
  
  createdAt         DateTime       @default(now())
  
  @@index([entityType, entityId])
  @@index([paymentIntentId])
  @@index([bookingId])
  @@index([bookingGroupId])
  @@index([userId])
  @@index([actionType])
  @@index([createdAt])
}

enum AuditEntityType {
  PAYMENT_INTENT
  BOOKING
  CHARGE
  ROOM_CHANGE
  PRICING_CHANGE
  GUEST_INFO_CHANGE
  BOOKING_GROUP
}

enum AuditActionType {
  CREATED
  CANCELLED
  REFUNDED
  ROOM_CHANGED
  DATES_CHANGED
  GUEST_INFO_CHANGED
  PRICING_CHANGED
  STATUS_CHANGED
  NOTES_ADDED
  EDITED
  GROUP_CREATED
  GROUP_UPDATED
  GROUP_DELETED
  BOOKING_ADDED_TO_GROUP
  BOOKING_REMOVED_FROM_GROUP
}
