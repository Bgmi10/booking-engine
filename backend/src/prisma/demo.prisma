// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// // =====================================
// // USER MANAGEMENT & ROLES (Section 8.0)
// // =====================================
// model User {    
//   id        String   @id @default(uuid())
//   name      String
//   email     String   @unique
//   password  String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   role      UserRole
//   phone     String?
//   isActive  Boolean  @default(true)
  
//   // Relations
//   createdBookings     Booking[]           @relation("BookingCreatedBy")
//   assignedTasks       Task[]              @relation("TaskAssignedTo")
//   createdTasks        Task[]              @relation("TaskCreatedBy")
//   completedTasks      TaskCompletion[]
//   createdPaymentIntents PaymentIntent[]   @relation("PaymentIntentCreatedBy")
//   ordersTaken         Order[]             @relation("OrderTakenBy")
//   weddingProposals    WeddingProposal[]   @relation("ProposalCreatedBy")
// }

// enum UserRole {
//   ADMIN
//   MANAGER
//   RECEPTION
//   CLEANER
//   MAINTENANCE
//   WAITER
//   KITCHEN
// }

// // =====================================
// // GUEST MANAGEMENT & CRM (Section 2.0)
// // =====================================
// model Guest {
//   id              String        @id @default(uuid())
//   firstName       String
//   middleName      String?
//   lastName        String
//   email           String        @unique
//   phone           String?
//   nationality     String?
//   dateOfBirth     DateTime?
//   anniversaryDate DateTime?
//   passportNumber  String?
//   passportExpiry  DateTime?
  
//   // CRM Data
//   totalNightsStayed Int         @default(0)
//   totalMoneySpent   Float       @default(0)
//   favoriteItems     Json?       // Store favorite drinks, products as JSON
//   vipStatus         Boolean     @default(false)
//   notes             String?
  
//   createdAt       DateTime      @default(now())
//   updatedAt       DateTime      @updatedAt
  
//   // Relations
//   bookings        Booking[]
//   guestRelations  GuestRelation[] @relation("PrimaryGuest")
//   relatedGuests   GuestRelation[] @relation("RelatedGuest")
//   orders          Order[]
//   checkIns        GuestCheckIn[]
  
//   @@index([email])
// }

// model GuestRelation {
//   id              String      @id @default(uuid())
//   primaryGuest    Guest       @relation("PrimaryGuest", fields: [primaryGuestId], references: [id], onDelete: Cascade)
//   primaryGuestId  String
//   relatedGuest    Guest       @relation("RelatedGuest", fields: [relatedGuestId], references: [id], onDelete: Cascade)
//   relatedGuestId  String
//   relationship    String      // "spouse", "family", "friend", etc.
//   createdAt       DateTime    @default(now())
  
//   @@unique([primaryGuestId, relatedGuestId])
// }

// model GuestCheckIn {
//   id              String      @id @default(uuid())
//   guest           Guest       @relation(fields: [guestId], references: [id], onDelete: Cascade)
//   guestId         String
//   booking         Booking     @relation(fields: [bookingId], references: [id], onDelete: Cascade)
//   bookingId       String
//   checkInData     Json        // Store passport details, additional info
//   completedAt     DateTime?
//   createdAt       DateTime    @default(now())
// }

// // =====================================
// // ROOM MANAGEMENT (Section 3.0)
// // =====================================
// model Room {
//   id           String          @id @default(uuid())
//   name         String       
//   description  String       
//   amenities    String[]       
//   basePrice    Float       
//   capacity     Int       
//   hasPrivateBath Boolean     @default(true)
//   floor        Int?
//   roomNumber   String?
//   isActive     Boolean       @default(true)
//   createdAt    DateTime      @default(now())
//   updatedAt    DateTime      @updatedAt
  
//   // Relations
//   images       RoomImage[]
//   bookings     Booking[]
//   holds        TemporaryHold[]
//   roomRates    RoomRate[]
//   tasks        Task[]
//   autoTasks    AutoTask[]
//   roomGroups   RoomGroup[]   @relation("RoomGroupRooms")
// }

// model RoomImage {
//   id          String   @id @default(uuid())
//   url         String
//   alt         String?
//   roomId      String
//   room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
// }

// model RoomGroup {
//   id          String   @id @default(uuid())
//   name        String
//   description String?
//   createdAt   DateTime @default(now())
  
//   // Relations
//   rooms       Room[]   @relation("RoomGroupRooms")
//   bookings    Booking[] @relation("BookingRoomGroup")
// }

// // =====================================
// // RATES & PRICING (Section 1.2)
// // =====================================
// model RatePolicy {
//   id                  String   @id @default(uuid())
//   name                String
//   description         String
//   isPublic            Boolean  @default(true)  // Hidden rates for management only
//   isActive            Boolean  @default(true)
  
//   // Payment Policy
//   prepayPercentage    Int?     // Percentage to pay upfront
//   fullPaymentDays     Int?     // Days before arrival for full payment
//   refundable          Boolean  @default(false)
//   changeAllowedDays   Int?     // Days before arrival changes allowed
//   rebookValidityDays  Int?     // Days validity for rebooking
  
//   // Stripe Integration
//   stripeProductId     String?  // For automated payment plans
//   stripePriceId       String?
  
//   createdAt           DateTime @default(now())
//   updatedAt           DateTime @updatedAt
  
//   // Relations
//   roomRates           RoomRate[]
//   bookings            Booking[]
// }

// model RoomRate {
//   id              String     @id @default(uuid())
//   room            Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
//   roomId          String
//   ratePolicy      RatePolicy @relation(fields: [ratePolicyId], references: [id], onDelete: Cascade)
//   ratePolicyId    String
//   customPrice     Float?     // Override base room price
//   validFrom       DateTime?  // Seasonal rates
//   validTo         DateTime?
//   createdAt       DateTime   @default(now())

//   @@index([roomId, ratePolicyId])
//   @@unique([roomId, ratePolicyId])
// }

// // =====================================
// // PRODUCTS & SERVICES (Section 1.2, 4.0)
// // =====================================
// model Product {
//   id              String            @id @default(uuid())
//   name            String
//   description     String
//   frontDescription String?          // Client-facing description
//   invoiceDescription String?        // Invoice description
//   price           Float
//   category        ProductCategory
//   vatRate         Float            @default(0) // 0%, 3%, 5%, 10%, 22%
//   isActive        Boolean          @default(true)
//   isService       Boolean          @default(false)
  
//   // Service-specific fields
//   duration        Int?             // Duration in minutes
//   location        String?          // Pool, room, restaurant, etc.
//   availableTimes  String[]         // Available time slots
//   maxQuantity     Int?             // Max quantity per booking
  
//   // Food/Drink specific
//   ingredients     String[]
//   allergens       String[]
//   isAlcoholic     Boolean          @default(false)
  
//   createdAt       DateTime         @default(now())
//   updatedAt       DateTime         @updatedAt
  
//   // Relations
//   orderItems      OrderItem[]
//   bookingProducts BookingProduct[]
//   weddingItems    WeddingItineraryItem[]
//   customRequests  CustomServiceRequest[]
// }

// enum ProductCategory {
//   ACCOMMODATION
//   FOOD
//   BEVERAGE
//   SPA
//   ACTIVITY
//   TRANSPORTATION
//   WEDDING_SERVICE
//   ROOM_SERVICE
//   OTHER
// }

// model BookingProduct {
//   id          String   @id @default(uuid())
//   booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
//   bookingId   String
//   product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
//   productId   String
//   quantity    Int      @default(1)
//   unitPrice   Float    // Price at time of booking
//   totalPrice  Float
//   dateAdded   DateTime @default(now())
//   scheduledDate DateTime? // For scheduled services
//   notes       String?
//   addedBy     String?  // User ID who added this
  
//   @@index([bookingId])
// }

// // =====================================
// // VOUCHERS & DISCOUNTS (Section 1.3)
// // =====================================
// model Voucher {
//   id              String        @id @default(uuid())
//   code            String        @unique
//   description     String
//   discountType    DiscountType  // PERCENTAGE, FIXED_AMOUNT
//   discountValue   Float
//   minOrderAmount  Float?
//   maxDiscount     Float?        // Cap for percentage discounts
  
//   // Usage limits
//   maxUses         Int?          // null for unlimited
//   usedCount       Int           @default(0)
//   isOneTimeUse    Boolean       @default(false)
  
//   // Validity
//   validFrom       DateTime
//   validTo         DateTime
//   isActive        Boolean       @default(true)
  
//   // Product restrictions
//   applicableProducts String[]   // Product IDs
//   applicableCategories ProductCategory[]
  
//   createdAt       DateTime      @default(now())
//   updatedAt       DateTime      @updatedAt
  
//   // Relations
//   bookingVouchers BookingVoucher[]
// }

// enum DiscountType {
//   PERCENTAGE
//   FIXED_AMOUNT
// }

// model BookingVoucher {
//   id          String   @id @default(uuid())
//   booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
//   bookingId   String
//   voucher     Voucher  @relation(fields: [voucherId], references: [id], onDelete: Cascade)
//   voucherId   String
//   discountAmount Float
//   appliedAt   DateTime @default(now())
// }

// // =====================================
// // BOOKING SYSTEM (Section 1.0)
// // =====================================
// model Booking {
//   id                  String        @id @default(uuid())
  
//   // Guest Information
//   guest               Guest         @relation(fields: [guestId], references: [id], onDelete: Cascade)
//   guestId             String
//   totalGuests         Int
  
//   // Booking Details
//   checkIn             DateTime  
//   checkOut            DateTime  
//   status              BookingStatus @default(PENDING)
//   bookingType         BookingType   @default(LEISURE)
  
//   // Room Assignment
//   room                Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
//   roomId              String
//   roomGroup           RoomGroup?    @relation("BookingRoomGroup", fields: [roomGroupId], references: [id])
//   roomGroupId         String?
  
//   // Pricing
//   baseAmount          Float
//   totalAmount         Float
//   taxAmount           Float
//   discountAmount      Float         @default(0)
//   outstandingAmount   Float         @default(0)
  
//   // Policies
//   ratePolicy          RatePolicy    @relation(fields: [ratePolicyId], references: [id])
//   ratePolicyId        String
  
//   // Admin fields
//   createdBy           User?         @relation("BookingCreatedBy", fields: [createdById], references: [id])
//   createdById         String?
//   adminNotes          String?
//   internalNotes       String?
//   specialRequests     String?
  
//   // Car Details (for Dahua integration)
//   carNumberPlate      String?
  
//   createdAt           DateTime      @default(now())
//   updatedAt           DateTime      @updatedAt
  
//   // Relations
//   paymentIntentId     String?
//   paymentIntent       PaymentIntent? @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)
//   bookingProducts     BookingProduct[]
//   bookingVouchers     BookingVoucher[]
//   guestCheckIns       GuestCheckIn[]
//   tasks               Task[]
//   orders              Order[]
//   weddingBooking      WeddingBooking?
  
//   @@index([roomId, checkIn, checkOut])
//   @@index([status, checkIn])
//   @@index([guestId])
// }

// enum BookingStatus {
//   PENDING
//   CONFIRMED
//   CHECKED_IN
//   CHECKED_OUT
//   CANCELLED
//   REFUNDED
//   NO_SHOW
// }

// enum BookingType {
//   LEISURE
//   BUSINESS
//   WEDDING
//   EVENT
//   GROUP
// }

// // =====================================
// // PAYMENT SYSTEM (Section 1.3)
// // =====================================
// model PaymentIntent {
//   id                    String              @id @default(uuid())
//   stripePaymentIntentId String?             @unique
//   stripeSessionId       String?             @unique
//   stripePaymentLinkId   String?
  
//   // Payment details
//   amount                Float
//   currency              String              @default("eur")
//   status                PaymentIntentStatus @default(CREATED)
  
//   // Data preservation
//   bookingData           Json                // Booking items as JSON
//   customerData          Json                // Customer details as JSON
//   taxAmount             Float
//   totalAmount           Float
  
//   // Admin tracking
//   createdByAdmin        Boolean             @default(false)
//   createdBy             User?               @relation("PaymentIntentCreatedBy", fields: [createdById], references: [id])
//   createdById           String?
//   adminNotes            String?
  
//   // Expiration
//   expiresAt             DateTime
  
//   // Timestamps
//   createdAt             DateTime            @default(now())
//   updatedAt             DateTime            @updatedAt
//   paidAt                DateTime?
  
//   // Relations
//   bookings              Booking[]        
//   temporaryHolds        TemporaryHold[]
//   payments              Payment[]
//   offlinePayments       OfflinePayment[]
// }

// model Payment {
//   id                    String           @id @default(uuid())
//   stripeSessionId       String?          @unique
//   stripePaymentIntentId String?          @unique
//   amount                Float
//   currency              String
//   status                PaymentStatus
//   createdAt             DateTime         @default(now())
//   paymentIntentId       String?
//   paymentIntent         PaymentIntent?   @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)
// }

// model OfflinePayment {
//   id                String         @id @default(uuid())
//   paymentIntent     PaymentIntent  @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)
//   paymentIntentId   String
//   amount            Float
//   currency          String         @default("eur")
//   method            String         // "bank_transfer", "cash", "check"
//   reference         String?        // Bank reference, check number, etc.
//   notes             String?
//   processedAt       DateTime       @default(now())
//   processedBy       String         // User ID
// }

// model TemporaryHold {
//   id              String         @id @default(uuid())
//   checkIn         DateTime      
//   checkOut        DateTime      
//   createdAt       DateTime       @default(now())
//   expiresAt       DateTime      
//   room            Room           @relation(fields: [roomId], references: [id], onDelete: Cascade)
//   roomId          String
//   paymentIntentId String?
//   paymentIntent   PaymentIntent? @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)

//   @@index([expiresAt])
// }

// enum PaymentIntentStatus {
//   CREATED
//   PAYMENT_LINK_SENT
//   PENDING
//   PROCESSING
//   SUCCEEDED
//   FAILED
//   CANCELLED
//   EXPIRED
//   REFUNDED
// }

// enum PaymentStatus {
//   PENDING
//   COMPLETED
//   REFUNDED
//   FAILED
// }

// // =====================================
// // TASK & NOTIFICATION SYSTEM (Section 3.0)
// // =====================================
// model Task {
//   id              String          @id @default(uuid())
//   title           String
//   description     String?
//   priority        TaskPriority    @default(MEDIUM)
//   status          TaskStatus      @default(PENDING)
  
//   // Assignment
//   assignedTo      User?           @relation("TaskAssignedTo", fields: [assignedToId], references: [id])
//   assignedToId    String?
//   createdBy       User            @relation("TaskCreatedBy", fields: [createdById], references: [id])
//   createdById     String
  
//   // Context
//   room            Room?           @relation(fields: [roomId], references: [id])
//   roomId          String?
//   booking         Booking?        @relation(fields: [bookingId], references: [id])
//   bookingId       String?
  
//   // Scheduling
//   dueDate         DateTime?
//   scheduledDate   DateTime?
  
//   // Media
//   images          TaskImage[]
  
//   createdAt       DateTime        @default(now())
//   updatedAt       DateTime        @updatedAt
  
//   // Relations
//   completions     TaskCompletion[]
//   autoTask        AutoTask?       @relation(fields: [autoTaskId], references: [id])
//   autoTaskId      String?
  
//   @@index([assignedToId, status])
//   @@index([dueDate])
// }

// enum TaskPriority {
//   LOW
//   MEDIUM
//   HIGH
//   URGENT
// }

// enum TaskStatus {
//   PENDING
//   IN_PROGRESS
//   COMPLETED
//   CANCELLED
// }

// model TaskImage {
//   id          String   @id @default(uuid())
//   url         String
//   description String?
//   task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
//   taskId      String
//   uploadedAt  DateTime @default(now())
// }

// model TaskCompletion {
//   id          String   @id @default(uuid())
//   task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
//   taskId      String
//   completedBy User     @relation(fields: [completedById], references: [id])
//   completedById String
//   notes       String?
//   images      Json?    // URLs of completion photos
//   completedAt DateTime @default(now())
// }

// model AutoTask {
//   id              String      @id @default(uuid())
//   name            String
//   description     String
//   triggerType     String      // "STAY_DURATION", "CHECK_IN", "CHECK_OUT"
//   triggerValue    Int?        // Days for STAY_DURATION
//   taskTemplate    String      // Task description template
  
//   // Room assignment
//   rooms           Room[]
//   applicableRoles UserRole[]
  
//   isActive        Boolean     @default(true)
//   createdAt       DateTime    @default(now())
  
//   // Relations
//   generatedTasks  Task[]
// }

// // =====================================
// // ORDERING SYSTEM (Section 4.0)
// // =====================================
// model Order {
//   id              String        @id @default(uuid())
//   orderNumber     String        @unique
  
//   // Customer
//   guest           Guest?        @relation(fields: [guestId], references: [id])
//   guestId         String?
//   booking         Booking?      @relation(fields: [bookingId], references: [id])
//   bookingId       String?
  
//   // Order details
//   status          OrderStatus   @default(PENDING)
//   orderType       OrderType
//   location        String?       // Pool, breakfast area, room number
//   tableNumber     String?
  
//   // Totals
//   subtotal        Float
//   taxAmount       Float
//   totalAmount     Float
//   discountAmount  Float         @default(0)
  
//   // Staff
//   takenBy         User?         @relation("OrderTakenBy", fields: [takenById], references: [id])
//   takenById       String?
  
//   // Fulfillment
//   estimatedTime   Int?          // Minutes
//   actualTime      Int?
//   notes           String?
  
//   // QR Code ordering
//   qrCodeId        String?
//   isQrOrder       Boolean       @default(false)
  
//   createdAt       DateTime      @default(now())
//   updatedAt       DateTime      @updatedAt
  
//   // Relations
//   items           OrderItem[]
//   statusHistory   OrderStatusHistory[]
  
//   @@index([status, createdAt])
//   @@index([bookingId])
// }

// enum OrderStatus {
//   PENDING
//   CONFIRMED
//   PREPARING
//   READY
//   DELIVERED
//   CANCELLED
// }

// enum OrderType {
//   DINE_IN
//   ROOM_SERVICE
//   TAKEAWAY
//   POOL_SERVICE
// }

// model OrderItem {
//   id          String   @id @default(uuid())
//   order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
//   orderId     String
//   product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
//   productId   String
//   quantity    Int
//   unitPrice   Float
//   totalPrice  Float
//   notes       String?  // Special instructions
  
//   @@index([orderId])
// }

// model OrderStatusHistory {
//   id          String      @id @default(uuid())
//   order       Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
//   orderId     String
//   fromStatus  OrderStatus?
//   toStatus    OrderStatus
//   changedBy   String?     // User ID
//   notes       String?
//   timestamp   DateTime    @default(now())
// }

// // =====================================
// // WEDDING & PROPOSAL SYSTEM (Section 5.0)
// // =====================================
// model WeddingProposal {
//   id                  String                    @id @default(uuid())
//   proposalNumber      String                    @unique
  
//   // Client Information
//   clientName          String
//   clientEmail         String
//   clientPhone         String?
//   partnerName         String?
  
//   // Event Details
//   eventDate           DateTime
//   endDate             DateTime?
//   totalNights         Int
//   maxGuests           Int                       @default(120)
//   estimatedGuests     Int
  
//   // Proposal Status
//   status              WeddingProposalStatus     @default(DRAFT)
//   version             Int                       @default(1)
  
//   // Pricing
//   totalAmount         Float
//   depositAmount       Float
//   accommodationAmount Float
//   servicesAmount      Float
  
//   // Payment Schedule
//   paymentSchedule     Json                      // Payment plan details
  
//   // Admin
//   createdBy           User                      @relation("ProposalCreatedBy", fields: [createdById], references: [id])
//   createdById         String
//   notes               String?
  
//   // Dates Management
//   datesHeldUntil      DateTime?
  
//   createdAt           DateTime                  @default(now())
//   updatedAt           DateTime                  @updatedAt
  
//   // Relations
//   itinerary           WeddingItinerary[]
//   booking             WeddingBooking?
//   customRequests      CustomServiceRequest[]
//   communications      WeddingCommunication[]
// }

// enum WeddingProposalStatus {
//   DRAFT
//   SENT
//   VIEWED
//   DATES_HELD
//   ACCEPTED
//   CONFIRMED
//   CANCELLED
//   EXPIRED
// }

// model WeddingItinerary {
//   id              String                    @id @default(uuid())
//   proposal        WeddingProposal           @relation(fields: [proposalId], references: [id], onDelete: Cascade)
//   proposalId      String
//   dayNumber       Int
//   date            DateTime
//   title           String                    // "Arrival Day", "Wedding Ceremony", etc.
//   description     String?
//   estimatedGuests Int
  
//   // Relations
//   items           WeddingItineraryItem[]
  
//   @@index([proposalId, dayNumber])
// }

// model WeddingItineraryItem {
//   id              String            @id @default(uuid())
//   itinerary       WeddingItinerary  @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
//   itineraryId     String
//   product         Product           @relation(fields: [productId], references: [id])
//   productId       String
  
//   quantity        Int               @default(1)
//   estimatedGuests Int?              // Override itinerary guest count
//   unitPrice       Float
//   totalPrice      Float
//   pricingType     String            @default("FIXED") // "FIXED", "PER_PERSON"
  
//   status          String            @default("OPTIONAL") // "CONFIRMED", "OPTIONAL"
//   notes           String?
//   menuDetails     Json?             // For dining items
  
//   @@index([itineraryId])
// }

// model WeddingBooking {
//   id              String          @id @default(uuid())
//   proposal        WeddingProposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
//   proposalId      String          @unique
//   booking         Booking         @relation(fields: [bookingId], references: [id], onDelete: Cascade)
//   bookingId       String          @unique
  
//   // Final confirmed details
//   finalGuestCount Int
//   finalAmount     Float
  
//   // External contacts
//   contacts        Json            // Hair/makeup, photographer, etc.
  
//   createdAt       DateTime        @default(now())
//   updatedAt       DateTime        @updatedAt
// }

// model CustomServiceRequest {
//   id              String              @id @default(uuid())
//   proposal        WeddingProposal     @relation(fields: [proposalId], references: [id], onDelete: Cascade)
//   proposalId      String
  
//   title           String
//   description     String
//   images          String[]            // Image URLs
//   status          CustomRequestStatus @default(PENDING)
  
//   // Admin response
//   adminResponse   String?
//   adminImages     String[]
//   quotedPrice     Float?
  
//   createdAt       DateTime            @default(now())
//   updatedAt       DateTime            @updatedAt
  
//   // Relations
//   product         Product?            @relation(fields: [productId], references: [id])
//   productId       String?             // Created if accepted
// }

// enum CustomRequestStatus {
//   PENDING
//   QUOTED
//   ACCEPTED
//   REJECTED
// }

// model WeddingCommunication {
//   id              String          @id @default(uuid())
//   proposal        WeddingProposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
//   proposalId      String
  
//   type            String          // "EMAIL", "WHATSAPP", "PHONE"
//   subject         String?
//   content         String
//   direction       String          // "INBOUND", "OUTBOUND"
  
//   timestamp       DateTime        @default(now())
  
//   @@index([proposalId, timestamp])
// }

// // =====================================
// // EMAIL TEMPLATES & COMMUNICATION
// // =====================================
// model EmailTemplate {
//   id          String      @id @default(cuid())
//   name        String
//   type        String
//   subject     String
//   html        String      @db.Text
//   design      String?     @db.Text
//   isActive    Boolean     @default(false)
//   version     Int         @default(1)
//   variables   Json?
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt

//   @@index([type, isActive])
// }

// // =====================================
// // CHANNEL MANAGER INTEGRATION (Section 7.0)
// // =====================================
// model ChannelManager {
//   id              String              @id @default(uuid())
//   name            String              // "Booking.com", "Expedia", "Airbnb"
//   apiKey          String?
//   isActive        Boolean             @default(true)
//   paymentMethod   ChannelPaymentMethod @default(PAY_AT_PROPERTY)
//   commission      Float?              // Commission percentage
  
//   settings        Json?               // Channel-specific settings
//   lastSync        DateTime?
  
//   createdAt       DateTime            @default(now())
//   updatedAt       DateTime            @updatedAt
  
//   // Relations
//   channelBookings ChannelBooking[]
// }

// enum ChannelPaymentMethod {
//   PAY_TO_CHANNEL    // Guest pays to channel, we receive from channel
//   PAY_AT_PROPERTY   // Guest pays when they check in
// }

// model ChannelBooking {
//   id                  String         @id @default(uuid())
//   channelManager      ChannelManager @relation(fields: [channelManagerId], references: [id])
//   channelManagerId    String
//   booking             Booking        @relation(fields: [bookingId], references: [id])
//   bookingId           String         @unique
  
//   externalBookingId   String         // ID from the channel
//   channelReference    String?        // Channel's reference number
//   commission          Float?
  
//   syncedAt            DateTime       @default(now())
  
//   @@index([channelManagerId])
//   @@index([externalBookingId])
// }

// // =====================================
// // SYSTEM SETTINGS & CONFIGURATION
// // =====================================
// model GeneralSettings {
//   id              String        @id         @default(uuid())
//   minStayDays     Int           @default(2)
//   maxStayDays     Int           @default(30)
//   taxPercentage   Float?        @default(10)
//   currency        String        @default("EUR")
//   timezone        String        @default("Europe/Rome")
  
//   // Dahua Camera Settings
//   dahuaApiUrl     String?
//   dahuaUsername   String?
//   dahuaPassword   String?
  
//   // Email Settings
//   smtpHost        String?
//   smtpPort        Int?
//   smtpUsername    String?
//   smtpPassword    String?
//   fromEmail       String?
  
//   // Business Details
//   businessName    String?
//   businessAddress String?
//   businessPhone   String?
//   businessEmail   String?
//   vatNumber       String?
  
//   updatedAt       DateTime      @updatedAt
// }

// model Otp {
//   id        String   @id @default(uuid())
//   email     String   @unique
//   otp       String
//   expiresAt DateTime
//   createdAt DateTime @default(now())
// }

// // Add missing relation to Booking
// model Booking {
//   // ... existing fields ...
//   channelBooking  ChannelBooking?
// }

// // =====================================
// // INDEXES FOR PERFORMANCE
// // =====================================
// // Additional indexes are already included in the models above